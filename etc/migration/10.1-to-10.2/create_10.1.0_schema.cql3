CREATE KEYSPACE "oaeTest" WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'}  AND durable_writes = true;

use "oaeTest";

CREATE TABLE "AuthenticationLoginId" (
    "loginId" text PRIMARY KEY,
    password text,
    "userId" text
);

CREATE TABLE "OAuthClientsByUser" (
    "userId" text,
    "clientId" text,
    value text,
    PRIMARY KEY ("userId", "clientId")
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY ("clientId" ASC);

CREATE TABLE "AuthzRoles" (
    "principalId" text,
    "resourceId" text,
    role text,
    PRIMARY KEY ("principalId", "resourceId")
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY ("resourceId" ASC);

CREATE TABLE "MessageBoxMessages" (
    "messageBoxId" text,
    "threadKey" text,
    value text,
    PRIMARY KEY ("messageBoxId", "threadKey")
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY ("threadKey" ASC);

CREATE TABLE "MessageBoxRecentContributions" (
    "messageBoxId" text,
    "contributorId" text,
    value text,
    PRIMARY KEY ("messageBoxId", "contributorId")
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY ("contributorId" ASC);

CREATE TABLE "Content" (
    "contentId" text PRIMARY KEY,
    created text,
    "createdBy" text,
    description text,
    "displayName" text,
    "etherpadGroupId" text,
    "etherpadPadId" text,
    filename text,
    "largeUri" text,
    "lastModified" text,
    "latestRevisionId" text,
    link text,
    "mediumUri" text,
    mime text,
    previews text,
    "resourceSubType" text,
    size text,
    "smallUri" text,
    status text,
    "tenantAlias" text,
    "thumbnailUri" text,
    uri text,
    visibility text,
    "wideUri" text
);

CREATE TABLE "OAuthClient" (
    id text PRIMARY KEY,
    "displayName" text,
    secret text,
    "userId" text
);

CREATE TABLE "TenantNetwork" (
    id text PRIMARY KEY,
    "displayName" text
);

CREATE TABLE "Principals" (
    "principalId" text PRIMARY KEY,
    "acceptedTC" text,
    "admin:global" text,
    "admin:tenant" text,
    created timestamp,
    "createdBy" text,
    description text,
    "displayName" text,
    email text,
    "emailPreference" text,
    joinable text,
    "largePictureUri" text,
    "lastModified" text,
    locale text,
    "mediumPictureUri" text,
    "notificationsLastRead" text,
    "notificationsUnread" text,
    "publicAlias" text,
    "smallPictureUri" text,
    "tenantAlias" text,
    visibility text
);

CREATE TABLE "Config" (
    "tenantAlias" text,
    "configKey" text,
    value text,
    PRIMARY KEY ("tenantAlias", "configKey")
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY ("configKey" ASC);

CREATE TABLE "Folders" (
    id text PRIMARY KEY,
    created bigint,
    "createdBy" text,
    description text,
    "displayName" text,
    "groupId" text,
    "lastModified" bigint,
    previews text,
    "tenantAlias" text,
    visibility text
);

CREATE TABLE "AuthzMembershipsCache" (
    "principalId" text,
    "groupId" text,
    value text,
    PRIMARY KEY ("principalId", "groupId")
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY ("groupId" ASC);

CREATE TABLE "FoldersGroupId" (
    "groupId" text PRIMARY KEY,
    "folderId" text
);

CREATE TABLE "FollowingUsersFollowing" (
    "userId" text,
    "followingId" text,
    value text,
    PRIMARY KEY ("userId", "followingId")
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY ("followingId" ASC);

CREATE TABLE "AuthenticationUserLoginId" (
    "userId" text,
    "loginId" text,
    value text,
    PRIMARY KEY ("userId", "loginId")
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY ("loginId" ASC);

CREATE TABLE "FollowingUsersFollowers" (
    "userId" text,
    "followerId" text,
    value text,
    PRIMARY KEY ("userId", "followerId")
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY ("followerId" ASC);

CREATE TABLE "TenantNetworkTenants" (
    "tenantNetworkId" text,
    "tenantAlias" text,
    value text,
    PRIMARY KEY ("tenantNetworkId", "tenantAlias")
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY ("tenantAlias" ASC);

CREATE TABLE "OAuthAccessTokenByUser" (
    "userId" text,
    "clientId" text,
    "token" text,
    PRIMARY KEY ("userId", "clientId")
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY ("clientId" ASC);

CREATE TABLE "Messages" (
    id text PRIMARY KEY,
    body text,
    "createdBy" text,
    deleted text,
    "threadKey" text
);

CREATE TABLE "AuthzMembers" (
    "resourceId" text,
    "memberId" text,
    role text,
    PRIMARY KEY ("resourceId", "memberId")
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY ("memberId" ASC);

CREATE TABLE "AuthzMembershipsIndirectCache" (
    "principalId" text,
    "groupId" text,
    value text,
    PRIMARY KEY ("principalId", "groupId")
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY ("groupId" ASC);

CREATE TABLE "ShibbolethMetadata" (
    "loginId" text PRIMARY KEY,
    affiliation text,
    "allAttributes" text,
    "identityProvider" text,
    "persistentId" text,
    "unscopedAffiliation" text
);

CREATE TABLE "MediaCoreContentRevisionIdMap" (
    "mediaCoreId" text PRIMARY KEY,
    "contentId" text,
    "revisionId" text
);

CREATE TABLE "PreviewItems" (
    "revisionId" text,
    name text,
    value text,
    PRIMARY KEY ("revisionId", name)
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY (name ASC);

CREATE TABLE "OAuthAccessToken" (
    "token" text PRIMARY KEY,
    "clientId" text,
    "userId" text
);

CREATE TABLE "ActivityStreams" (
    "activityStreamId" text,
    "activityId" text,
    activity text,
    PRIMARY KEY ("activityStreamId", "activityId")
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY ("activityId" ASC);

CREATE TABLE "EmailBuckets" (
    "bucketId" text,
    "userId" text,
    PRIMARY KEY ("bucketId", "userId")
) WITH CLUSTERING ORDER BY ("userId" ASC);

CREATE TABLE "RevisionByContent" (
    "contentId" text,
    created text,
    "revisionId" text,
    PRIMARY KEY ("contentId", created)
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY (created ASC);

CREATE TABLE "MessageBoxMessagesDeleted" (
    "messageBoxId" text,
    "createdTimestamp" text,
    value text,
    PRIMARY KEY ("messageBoxId", "createdTimestamp")
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY ("createdTimestamp" ASC);

CREATE TABLE "Tenant" (
    alias text PRIMARY KEY,
    active boolean,
    "displayName" text,
    host text
);

CREATE TABLE "LibraryIndex" (
    "bucketKey" text,
    "rankedResourceId" text,
    value text,
    PRIMARY KEY ("bucketKey", "rankedResourceId")
) WITH COMPACT STORAGE AND CLUSTERING ORDER BY ("rankedResourceId" ASC);

CREATE TABLE "Discussions" (
    id text PRIMARY KEY,
    created text,
    "createdBy" text,
    description text,
    "displayName" text,
    "lastModified" text,
    "tenantAlias" text,
    visibility text
);

CREATE TABLE "Revisions" (
    "revisionId" text PRIMARY KEY,
    "contentId" text,
    created text,
    "createdBy" text,
    "etherpadHtml" text,
    filename text,
    "largeUri" text,
    "mediumUri" text,
    mime text,
    previews text,
    "previewsId" text,
    size text,
    "smallUri" text,
    status text,
    "thumbnailUri" text,
    uri text,
    "wideUri" text
);
