/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var OAE = require('oae-util/lib/oae');

var AuthenticationAPI = require('oae-authentication');

//////////////////////////////
// AUTHENTICATION PROVIDERS //
//////////////////////////////

require('./strategies/cas/rest');
require('./strategies/facebook/rest');
require('./strategies/google/rest');
require('./strategies/ldap/rest');
require('./strategies/local/rest');
require('./strategies/oauth/rest');
require('./strategies/shibboleth/rest');
require('./strategies/signed/rest');
require('./strategies/twitter/rest');


/**
 * @REST postAuthLogout
 *
 * Log out
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /auth/logout
 * @Return      {void}
 */
OAE.globalAdminRouter.on('post', '/api/auth/logout', AuthenticationAPI.logout);
OAE.tenantRouter.on('post', '/api/auth/logout', AuthenticationAPI.logout);

/**
 * @REST postAuthLocalResetInitUserid
 *
 * Generate a password reset token for a user, resolving the user on their id
 *
 * @Server      Admin
 * @Method      POST
 * @Path        /auth/local/reset/init/{userId}
 * @PathParam   {string}        userId                  The id of the user
 * @Return      {void}
 */
OAE.globalAdminRouter.on('post', '/api/auth/local/reset/init/:userId', function(req, res) {
    AuthenticationAPI.generateResetPasswordTokenByUserId(req.ctx, req.params.userId, function(err) {
        if (err) {
            return callback(err);
        }

        return res.send(200);
    });
});

/**
 * @REST postAuthLocalResetInitUsername
 *
 * Generate a password reset token for a user, resolving the user on their username
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /auth/local/reset/init/{username}
 * @PathParam   {string}        username                The username of the user
 * @Return      {void}
 */
OAE.tenantRouter.on('post', '/api/auth/local/reset/init/:username', function(req, res) {
    AuthenticationAPI.generateResetPasswordTokenByUsername(req.ctx, req.params.username, function(err) {
        if (err) {
            return callback(err);
        }

        return res.send(200);
    });
});

/**
 * @REST LocalResetChange
 *
 * Reset an user's password based on a existing username
 *
 * @Server      tenant
 * @Method      post
 * @Path        /auth/local/reset/change/{username}
 * @PathParam   {string}        username                The username of the user
 * @FormParam   {string}        password                The new password of the user
 * @FormParam   {string}        secret                  The reset password token that was emailed to the user
 * @Return      {void}
 * @HttpResponse                200                     The password was changed
 */
OAE.tenantRouter.on('post', '/api/auth/local/reset/change/:username', function(req, res){
    AuthenticationAPI.resetPassword(req.ctx, req.params.username, req.body.secret, req.body.password, function(err, changed) {
        if (err) {
            return callback(err);
        }

        return res.send(200);
    });
});
