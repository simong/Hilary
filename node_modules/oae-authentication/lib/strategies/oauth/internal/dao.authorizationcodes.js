/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Cassandra = require('oae-util/lib/cassandra');

var AuthorizationCode = require('../model').AuthorizationCode;


var createAuthorizationCode = module.exports.createAuthorizationCode = function(code, userId, clientId, redirectUri, callback) {
    var params = {
        'userId': userId,
        'clientId': clientId,
        'redirectUri': redirectUri
    };
    var query = Cassandra.constructUpsertCQL('OAuthAuthorizationCode', 'code', code, params, 'QUORUM');
    Cassandra.runQuery(query.query, query.parameters, function(err) {
        if (err) {
            return callback(err);
        }

        var authorizationCode = new AuthorizationCode(code, userId, clientId, redirectUri);
        return callback(null, authorizationCode);
    });
};

var getAuthorizationCode = module.exports.getAuthorizationCode = function(code, callback) {
    Cassandra.runQuery('SELECT * FROM OAuthAuthorizationCode USING CONSISTENCY QUORUM WHERE code = ?', [code], function(err, rows) {
        if (err) {
            return callback(err);
        } else if (!rows || rows[0].count <= 1) {
            return callback({'code': 401, 'msg': 'No authorization code found'});
        }

        var hash = Cassandra.rowToHash(rows[0]);
        var authorizationCode = new AuthorizationCode(hash.code, hash.userId, hash.clientId, hash.redirectUri);
        return callback(null, authorizationCode)
    });
};

var removeAuthorizationCode = module.exports.removeAuthorizationCode = function(code, callback) {
    Cassandra.runQuery('DELETE FROM OAuthAuthorizationCode WHERE code = ?', [code], callback);
};
