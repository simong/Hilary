/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var passport = require('passport');

var OAE = require('oae-util/lib/oae');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');

/**
 * Handle a request that performs local authentication
 *
 * @param  {Request}    req     The express request object
 * @param  {Response}   res     The express response object
 * @api private
 */
var _handleLocalAuthentication = function(req, res, next) {
    var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.LOCAL);
    var errorHandler = AuthenticationUtil.handlePassportError(req, res, next);
    passport.authenticate(strategyId)(req, res, errorHandler);
};

/**
 * Handle a callback request where a user has successfully authenticated to the system from an
 * external system
 *
 * @param  {Request}    req                     The express request object
 * @param  {User}       req.oaeAuthInfo.user    The authenticated user
 * @param  {Response}   res                     The express response object
 * @api private
 */
var _handleLocalAuthenticationSuccess = function(req, res, next) {
    // Simply return a 200 response with the user object
    res.send(200, req.oaeAuthInfo.user);
};

/**
 * Handle a request to determine if a username exists
 *
 * @param  {Request}    req                         The express request object
 * @param  {Context}    req.ctx                     The context of the current request
 * @param  {String}     req.params.username         The username to check for existence
 * @param  {String}     [req.params.tenantAlias]    The alias of the tenant in which to check for the username. If unspecified, defaults to the current tenant in context
 * @param  {Response}   res                         The express response object
 * @api private
 */
var _handleLocalUsernameExists = function(req, res) {
    AuthenticationAPI.localUsernameExists(req.ctx, req.params.tenantAlias, req.params.username, function(err, exists) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // If the login id doesn't exist, we send back a 404
        if (exists) {
            return res.send(200);
        } else {
            return res.send(404);
        }
    });
};

/**
 * Handle a request to change a user's password
 *
 * @param  {Request}    req                     The express request object
 * @param  {Context}    req.ctx                 The context of the current request
 * @param  {String}     req.params.userId       The id of the user whose password to change
 * @param  {String}     req.body.newPassword    The password to change the current password to
 * @param  {String}     [req.body.oldPassword]  The previous password, only needed if the current user is not an administrator
 * @param  {Response}   res                     The express response object
 * @api private
 */
var _handleChangePassword = function(req, res) {
    AuthenticationAPI.changePassword(req.ctx, req.params.id, req.body.oldPassword, req.body.newPassword, function(err, changed) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
};

/**
 * @REST postAuthLogin
 *
 * Login to a tenant
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /auth/login
 * @Return      {User}
 */
OAE.globalAdminRouter.on('post', '/api/auth/login', [_handleLocalAuthentication, _handleLocalAuthenticationSuccess]);
OAE.tenantRouter.on('post', '/api/auth/login', [_handleLocalAuthentication, _handleLocalAuthenticationSuccess]);

/*!
 * Change a user's password
 */
OAE.globalAdminRouter.on('post', '/api/user/:id/password', _handleChangePassword);
OAE.tenantRouter.on('post', '/api/user/:id/password', _handleChangePassword);

/*!
 * Check whether or not a username exists
 */
OAE.globalAdminRouter.on('get', '/api/auth/:tenantAlias/exists/:username', _handleLocalUsernameExists);
OAE.tenantRouter.on('get', '/api/auth/exists/:username', _handleLocalUsernameExists);
