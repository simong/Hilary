/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var EmailAPI = require('oae-email');

/**
 * Assert that a password reset token for a user can be generated
 *
 * @param  {RestContext}    restCtx             Standard REST Context object that contains the current tenant URL and the current user credentials. This is the user that will be logged out
 * @param  {String}         userIdOrPassword    The user id or username of the user to generate a reset password token for
 * @param  {Function}       callback            Standard callback method takes argument `err`
 * @param  {Object}         callback.token      The password reset token that was sent to the user
 */
var assertGenerateResetPasswordTokenSucceeds = module.exports.assertGenerateResetPasswordTokenSucceeds = function(restContext, userIdOrPassword, callback) {
    RestAPI.Authentication.generateResetPasswordToken(restContext, userIdOrPassword, function(err, body) {
        assert.ok(!err);

        // Assert the token is NOT returned in the response body
        assert.ok(!body);
    });

    EmailAPI.once('debugSent', function(message) {
        // Verify a token is passed in both the html and text email
        assert.ok(message.html.match(/\?token=(email-[a-zA-Z0-9]{32})/));
        assert.ok(message.text.match(/\?token=(email-[a-zA-Z0-9]{32})/));

        // Verify a token is passed in the email
        var token = message.text.match(/\?token=(email-[a-zA-Z0-9]{32})/)[1];
        assert.ok(token);
        token = decodeURIComponent(token);

        return callback(token);
    });
};

/**
 * Assert that a password reset token for a user can not be generated
 *
 * @param  {RestContext}    restCtx             Standard REST Context object that contains the current tenant URL and the current user credentials. This is the user that will be logged out
 * @param  {String}         userIdOrPassword    The user id or username of the user to generate a reset password token for
 * @param  {Function}       callback            Standard callback method takes argument `err`
 */
var assertGenerateResetPasswordTokenFails = module.exports.assertGenerateResetPasswordTokenFails = function(restContext, userIdOrPassword, code, callback) {
    RestAPI.Authentication.generateResetPasswordToken(restContext, userIdOrPassword, function(err, body) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};
