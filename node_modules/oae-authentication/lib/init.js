/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var crypto = require('crypto');
var passport = require('passport');

var AuthzUtil = require('oae-authz/lib/util');
var Cassandra = require('oae-util/lib/cassandra');
var Context = require('oae-context').Context;
var OAE = require('oae-util/lib/oae');
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsAPI = require('oae-tenants');
var User = require('oae-principals/lib/model').User;

var AuthenticationAPI = require('./api');
var AuthenticationUtil = require('./util');

var cookieSecret = null;

module.exports = function(config, callback) {

    cookieSecret = config.cookie.secret;

    // Attach the Authentication middleware
    AuthenticationUtil.setupAuthMiddleware(OAE.globalAdminServer);
    AuthenticationUtil.setupAuthMiddleware(OAE.tenantServer);

    // Setup the passport serializers
    setupPassportSerializers();

    ensureSchema(function(err) {
        if (err) {
            return callback(err);
        }

        AuthenticationAPI.init(config.servers.globalAdminAlias);

        require('./strategies/cas/init')(config);
        require('./strategies/facebook/init')(config);
        require('./strategies/google/init')(config);
        require('./strategies/ldap/init')(config);
        require('./strategies/local/init')(config);
        require('./strategies/oauth/init')(config);
        require('./strategies/shibboleth/init')(config);
        require('./strategies/signed/init')(config);
        require('./strategies/twitter/init')(config);

        // Add the OAE middleware to the ExpressJS server
        // We do this *AFTER* all the authentication strategies have been initialized
        // so they have a chance to add any middleware that could set the logged in user
        OAE.tenantServer.use(contextMiddleware);
        OAE.globalAdminServer.use(contextMiddleware);

        return callback();
    });
};

/**
 * Express.js middleware that will stick an OAE `Context` object on each request at `req.ctx`.
 * This context object will contain the current tenant and currently authenticated user (if any).
 *
 * @param  {Request}    req     The Express.js request
 * @param  {Response}   res     The express.js response
 * @param  {Function}   next    Standard callback function
 */
var contextMiddleware = function(req, res, next) {
    req.ctx = new Context(req.tenant, req.user);
    return next();
};

/**
 * Sets up the serialization methods for passport.
 * This should only be run once.
 *
 * @api private
 */
var setupPassportSerializers = function() {
    // This method determines what goes into the session cookie.
    // We only need the principalId in there.
    passport.serializeUser(function(user, done) {
        done(null, _encryptCookieData(user.id));
    });

    // A user has a cookie with a principalId in it. By passing the user to the callback,
    // it will be set on the request at `req.user`
    passport.deserializeUser(function(principalId, callback) {
        principalId = _decryptCookieData(principalId);
        PrincipalsDAO.getPrincipal(principalId, function (err, user) {
            if (err && err.code === 404) {
                return callback(null, false);
            } else if (err) {
                return callback(err);
            }

            return callback(null, user);
        });
    });
};

/**
 * Encrypt a piece of cookie data to be sent back to the client.
 *
 * @param  {String}     cookieData  The data to encrypt
 * @return {String}                 The encrypted data that is safe to return to the client
 * @api private
 */
var _encryptCookieData = function(cookieData) {
    var cipher = crypto.createCipher('aes-256-cbc', cookieSecret);
    return cipher.update(cookieData, 'utf8', 'base64') + cipher.final('base64');
};

/**
 * Decrypt a piece of cookie data that was provided by the client.
 *
 * @param  {String}     encryptedData   The encrypted data to decrypt
 * @return {String}                     The decrypted cookie data
 * @api private
 */
var _decryptCookieData = function(encryptedData) {
    var decipher = crypto.createDecipher('aes-256-cbc', cookieSecret);
    return decipher.update(encryptedData, 'base64', 'utf8') + decipher.final('utf8');
};

/**
 * Ensure that the all of the authentication-related schemas are created. If they already exist, this method will not do anything.
 *
 * @param  {Function}    callback       Invoked when the process completes
 * @param  {Object}      callback.err   Error object, containing the error message if any
 * @api private
 */
var ensureSchema = function(callback) {
    Cassandra.createColumnFamilies({
        'AuthenticationLoginId': 'CREATE COLUMNFAMILY AuthenticationLoginId (loginId text PRIMARY KEY, userId text);',
        'AuthenticationUserLoginId': 'CREATE COLUMNFAMILY AuthenticationUserLoginId (userId text PRIMARY KEY);',
        'OAuthAccessToken': 'CREATE COLUMNFAMILY OAuthAccessToken (token text PRIMARY KEY, userId text, clientId text)',
        'OAuthAccessTokenByUser': 'CREATE COLUMNFAMILY OAuthAccessTokenByUser (userId text PRIMARY KEY)',
        'OAuthAuthorizationCode': 'CREATE COLUMNFAMILY OAuthAuthorizationCode (code text PRIMARY KEY, userId text, clientId text, redirectUri text)',
        'OAuthClient': 'CREATE COLUMNFAMILY OAuthClient (id text PRIMARY KEY, displayName text, secret text)',
        'OAuthClientsByUser': 'CREATE COLUMNFAMILY OAuthClientsByUser (userId text PRIMARY KEY)'
    }, callback);
};
