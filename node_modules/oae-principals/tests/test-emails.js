/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

var AuthenticationTestUtil = require('oae-authentication/lib/test/util');
var ConfigTestUtil = require('oae-config/lib/test/util');
var EmailTestsUtil = require('oae-email/lib/test/util');
var RestAPI = require('oae-rest');
var TenantsTestUtil = require('oae-tenants/lib/test/util');
var TestsUtil = require('oae-tests');

var PrincipalsAPI = require('oae-principals');
var PrincipalsTestUtil = require('oae-principals/lib/test/util');


describe('User emails', function() {

    // REST contexts we can use to do REST requests
    var camAdminRestContext = null;
    var gtAdminRestContext = null;
    var anonymousRestContext = null;
    var globalAdminRestContext = null;

    beforeEach(function(callback) {
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();

        // Disable reCaptcha so anonymous users can create accounts
        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-principals/recaptcha/enabled': false}, function(err) {
            assert.ok(!err);

            // Drain the email queue
            return EmailTestsUtil.clearEmailCollections(callback);
        });
    });

    after(function(callback) {
        // Re-enable reCaptcha
        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-principals/recaptcha/enabled': true}, function(err) {
            assert.ok(!err);
            return callback();
        });
    });

    describe('Verification', function() {

        /**
         * Test that verifies validation when verifying an email address
         */
        it('verify validation when verifying an email address', function(callback) {
            // We can't use TestsUtil.generateTestUsers as that would do the verification process for us
            var email = TestsUtil.generateTestEmailAddress();
            var params = {
                'username': TestsUtil.generateTestUserId(),
                'password': 'password',
                'displayName': TestsUtil.generateRandomText(1),
                'email': email
            };
            PrincipalsTestUtil.assertCreateUserSucceeds(anonymousRestContext, params, function(user, token) {

                // Missing email address
                PrincipalsTestUtil.assertVerifyEmailFails(anonymousRestContext, null, token, 400, function() {

                    // Invalid email address
                    PrincipalsTestUtil.assertVerifyEmailFails(anonymousRestContext, 'not an email', token, 400, function() {

                        // An email address that has no token associated to it
                        var unrelatedEmail = TestsUtil.generateTestEmailAddress();
                        PrincipalsTestUtil.assertVerifyEmailFails(anonymousRestContext, unrelatedEmail, token, 401, function() {

                            // Missing token
                            PrincipalsTestUtil.assertVerifyEmailFails(anonymousRestContext, email, null, 400, function() {

                                // Invalid token
                                PrincipalsTestUtil.assertVerifyEmailFails(anonymousRestContext, email, 'not 32 chars', 400, function() {

                                    // Incorrect token
                                    PrincipalsTestUtil.assertVerifyEmailFails(anonymousRestContext, email, '12345678901234567890123456789012', 400, function() {

                                        // Sanity-check
                                        PrincipalsTestUtil.assertVerifyEmailSucceeds(anonymousRestContext, email, token, function() {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the user is logged in when they verified their email address
         */
        it('verify the user is logged in when they verified their email address', function(callback) {
            // We can't use TestsUtil.generateTestUsers as that would do the verification process for us
            var email = TestsUtil.generateTestEmailAddress();
            var params = {
                'username': TestsUtil.generateTestUserId(),
                'password': 'password',
                'displayName': TestsUtil.generateRandomText(1),
                'email': email
            };
            var restContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
            PrincipalsTestUtil.assertCreateUserSucceeds(restContext, params, function(user, token) {

                // Verify the email address
                PrincipalsTestUtil.assertVerifyEmailSucceeds(restContext, email, token, function() {

                    // Assert the user is logged in
                    RestAPI.User.getMe(restContext, function(err, me) {
                        assert.ok(!err);
                        assert.ok(!me.anon);
                        assert.strictEqual(me.id, user.id);
                        assert.strictEqual(me.email, email.toLowerCase());
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that an email address can be re-used by other users
         */
        it('verify an email address can be re-used by other users', function(callback) {
            var tenantAlias = TenantsTestUtil.generateTestTenantAlias();
            var tenantHost = tenantAlias + '.oae.com';
            TestsUtil.createTenantWithAdmin(tenantAlias, tenantHost, function(err, tenant, tenantAdminRestContext, tenantAdmin) {
                assert.ok(!err);

                // Disable reCaptcha for this tenant
                ConfigTestUtil.updateConfigAndWait(globalAdminRestContext, tenantAlias, {'oae-principals/recaptcha/enabled': false}, function(err) {
                    assert.ok(!err);

                    var username1 = TestsUtil.generateTestUserId();
                    var username2 = TestsUtil.generateTestUserId();
                    var email = TestsUtil.generateTestEmailAddress();
                    var paramsUser1 = {
                        'displayName': 'Test user 1',
                        'email': email,
                        'password': 'password',
                        'username': TestsUtil.generateTestUserId()
                    };
                    var paramsUser2 = {
                        'displayName': 'Test user 2',
                        'email': email,
                        'password': 'password',
                        'username': TestsUtil.generateTestUserId()
                    };

                    // Create the first user as a tenant admin so the email address is considered verified
                    PrincipalsTestUtil.assertCreateUserSucceeds(tenantAdminRestContext, paramsUser1, function(user1) {

                        // Verify there's a mapping for the first user
                        PrincipalsTestUtil.assertUserEmailMapping(email, [user1.id], function() {

                            // Create the second user as an anonymous user so the email address is not verified
                            var anonymousRestContext = TestsUtil.createTenantRestContext(tenantHost);
                            PrincipalsTestUtil.assertCreateUserSucceeds(anonymousRestContext, paramsUser2, function(user2, token) {

                                // Verify there's no mapping yet for the second user as the email address
                                // hasn't been verified yet
                                PrincipalsTestUtil.assertUserEmailMapping(email, [user1.id], function() {

                                    // Verify the email address
                                    PrincipalsTestUtil.assertVerifyEmailSucceeds(anonymousRestContext, email, token, function() {

                                        // The second user should now also be mapped to the email address
                                        PrincipalsTestUtil.assertUserEmailMapping(email, [user1.id, user2.id], function() {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Resending an email verification token', function() {

        /**
         * Test that verifies that an email verification token can be resent
         */
        it('verify an email verification token can be resent', function(callback) {
            // We can't use TestsUtil.generateTestUsers as that would do the verification process for us
            var email = TestsUtil.generateTestEmailAddress();
            var params = {
                'username': TestsUtil.generateTestUserId(),
                'password': 'password',
                'displayName': TestsUtil.generateRandomText(1),
                'email': email
            };
            var restContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
            PrincipalsTestUtil.assertCreateUserSucceeds(restContext, params, function(user, token) {
                RestAPI.Authentication.login(restContext, params.username, 'password', function(err) {
                    assert.ok(!err);

                    // Verify we can resend the email verification token
                    PrincipalsTestUtil.assertResendEmailTokenSucceeds(restContext, user.id, function(newToken) {

                        // Sanity-check we can use this new token to verify the email address
                        PrincipalsTestUtil.assertVerifyEmailSucceeds(restContext, params.email, newToken, function() {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when resending an email verification token
         */
        it('verify validation when resending an email verification token', function(callback) {
            // We can't use TestsUtil.generateTestUsers as that would do the verification process for us
            var email = TestsUtil.generateTestEmailAddress();
            var params = {
                'username': TestsUtil.generateTestUserId(),
                'password': 'password',
                'displayName': TestsUtil.generateRandomText(1),
                'email': email
            };
            var restContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
            PrincipalsTestUtil.assertCreateUserSucceeds(restContext, params, function(user, token) {
                RestAPI.Authentication.login(restContext, params.username, 'password', function(err) {
                    assert.ok(!err);

                    // Invalid user id
                    PrincipalsTestUtil.assertResendEmailTokenFails(restContext, 'not a user id', 400, function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when resending an email verification token
         */
        it('verify authorization when resending an email verification token', function(callback) {
            // We can't use TestsUtil.generateTestUsers as that would do the verification process for us
            var email = TestsUtil.generateTestEmailAddress();
            var params = {
                'username': TestsUtil.generateTestUserId(),
                'password': 'password',
                'displayName': TestsUtil.generateRandomText(1),
                'email': email
            };
            var restContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
            PrincipalsTestUtil.assertCreateUserSucceeds(restContext, params, function(user, token) {
                RestAPI.Authentication.login(restContext, params.username, 'password', function(err) {
                    assert.ok(!err);

                    // Anonymous users can't resend a token
                    PrincipalsTestUtil.assertResendEmailTokenFails(anonymousRestContext, user.id, 401, function() {

                        // Users cannot resend a token for someone else
                        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, otherUser) {
                            assert.ok(!err);
                            PrincipalsTestUtil.assertResendEmailTokenFails(otherUser.restContext, user.id, 401, function() {

                                // Tenant administrators from another tenant cannot resend a token
                                PrincipalsTestUtil.assertResendEmailTokenFails(gtAdminRestContext, user.id, 401, function() {

                                    // Tenant administrators from the same tenant as the user can resend a token
                                    PrincipalsTestUtil.assertResendEmailTokenSucceeds(camAdminRestContext, user.id, function(newToken) {

                                        // Global administrators can resend a token
                                        PrincipalsTestUtil.assertResendEmailTokenSucceeds(globalAdminRestContext, user.id, function(newToken) {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that an old token can be used when a new one has been sent already
         */
        it('verify an old token can be used when a new one has been sent already', function(callback) {
            // We can't use TestsUtil.generateTestUsers as that would do the verification process for us
            var email = TestsUtil.generateTestEmailAddress();
            var params = {
                'username': TestsUtil.generateTestUserId(),
                'password': 'password',
                'displayName': TestsUtil.generateRandomText(1),
                'email': email
            };
            var restContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
            PrincipalsTestUtil.assertCreateUserSucceeds(restContext, params, function(user, oldToken) {
                RestAPI.Authentication.login(restContext, params.username, 'password', function(err) {
                    assert.ok(!err);

                    // Resend the email verification token
                    PrincipalsTestUtil.assertResendEmailTokenSucceeds(restContext, user.id, function(newToken) {

                        // Assert we can still use the old one
                        PrincipalsTestUtil.assertVerifyEmailSucceeds(restContext, params.email, oldToken, function() {
                            return callback();
                        });
                    });
                });
            });
        });
    });

    describe('Moments when to verify an email address', function() {

        /**
         * Test that verifies that local accounts need to verify their email address
         */
        it('verify local user accounts need to verify their email address', function(callback) {
            // We can't use TestsUtil.generateTestUsers as that would do the verification process for us
            var email = TestsUtil.generateTestEmailAddress();
            var params = {
                'username': TestsUtil.generateTestUserId(),
                'password': 'password',
                'displayName': TestsUtil.generateRandomText(1),
                'email': email
            };
            PrincipalsTestUtil.assertCreateUserSucceeds(anonymousRestContext, params, function(user, token) {

                // Sanity check the user has no `email` property yet
                RestAPI.User.getUser(camAdminRestContext, user.id, function(err, user) {
                    assert.ok(!err);
                    assert.ok(!user.email);
                    assert.strictEqual(user.emailVerified, false);
                    assert.strictEqual(user.emailChange, email.toLowerCase());

                    // Assert that there's no mapping yet for the email address
                    PrincipalsTestUtil.assertUserEmailMapping(email, [], function() {

                        // Verify the email address
                        PrincipalsTestUtil.assertVerifyEmailSucceeds(anonymousRestContext, email, token, function() {

                            // Assert the mapping has been created
                            PrincipalsTestUtil.assertUserEmailMapping(email, [user.id], function() {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that local users accounts created by a tenant administrator do not need to verify their email address
         */
        it('verify local user accounts created by a tenant administrator do not need to verify their email address', function(callback) {
            // We can't use TestsUtil.generateTestUsers as that would do the verification process for us
            var email = TestsUtil.generateTestEmailAddress();
            var params = {
                'username': TestsUtil.generateTestUserId(),
                'password': 'password',
                'displayName': TestsUtil.generateRandomText(1),
                'email': email
            };
            PrincipalsTestUtil.assertCreateUserSucceeds(camAdminRestContext, params, function(user) {

                // Verify the user doesn't need to verify their email address
                RestAPI.User.getUser(camAdminRestContext, user.id, function(err, user) {
                    assert.ok(!err);
                    assert.strictEqual(user.email, email.toLowerCase());
                    assert.strictEqual(user.emailVerified, true);
                    assert.ok(!user.emailChange);

                    // Assert that there's a mapping for the email address
                    PrincipalsTestUtil.assertUserEmailMapping(email, [user.id], function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that user accounts created through trusted external SSO sources do not need to verify their email address
         */
        it('verify user accounts created through trusted external SSO sources do not need to verify their email address', function(callback) {
            // Create a tenant and enable google authentication on it
            var tenantAlias = TenantsTestUtil.generateTestTenantAlias();
            var tenantHost = tenantAlias + '.oae.com';
            TestsUtil.createTenantWithAdmin(tenantAlias, tenantHost, function(err, tenant, tenantAdminRestContext) {
                assert.ok(!err);
                AuthenticationTestUtil.assertUpdateAuthConfigSucceeds(tenantAdminRestContext, null, {'oae-authentication/google/enabled': true}, function() {

                    // Sign in through google
                    var email = TestsUtil.generateTestEmailAddress();
                    AuthenticationTestUtil.googleLogin(tenant.host, email, function(restContext, response) {

                        // As google is considered an authoritative source, the user shouldn't have
                        // to verify their email address
                        RestAPI.User.getMe(restContext, function(err, me) {
                            assert.ok(!err);
                            assert.ok(!me.anon);
                            assert.strictEqual(me.email, email.toLowerCase());
                            assert.strictEqual(me.emailVerified, true);
                            assert.ok(!me.emailChange);

                            // Assert that there's a mapping for the email address
                            PrincipalsTestUtil.assertUserEmailMapping(email, [me.id], function() {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Return a function that gets a stream to a file in the 'data' directory of the current test directory
         *
         * @param  {String}     filename    The name of the file in the test data directory to be loaded
         * @return {Function}               A function that, when executed without parameters, returns a stream to the file in the test data directory with the provided filename
         */
        var getDataFileStream = function(filename) {
            return function() {
                return fs.createReadStream(util.format('%s/data/%s', __dirname, filename));
            };
        };

        /**
         * Test that verifies that user accounts created or updated through a CSV import do not need to verify their email address
         */
        it('verify user accounts created or updated through a CSV import do not need to verify their email address', function(callback) {
            var tenantAlias = TenantsTestUtil.generateTestTenantAlias();
            var tenantHost = tenantAlias + '.oae.com';
            TestsUtil.createTenantWithAdmin(tenantAlias, tenantHost, function(err, tenant, tenantAdminRestContext) {
                assert.ok(!err);

                // Import users as a global admin using a local authentication strategy
                PrincipalsTestUtil.importUsers(globalAdminRestContext, tenant.alias, getDataFileStream('users-emails.csv'), 'local', null, function(err) {
                    assert.ok(!err);

                    // Verify the user's email address is verified
                    var restContext = TestsUtil.createTenantRestContext(tenant.host, 'users-emails-abc123', 'password');
                    RestAPI.User.getMe(restContext, function(err, user) {
                        assert.ok(!err);
                        assert.strictEqual(user.email, 'foo@users.emails.com');
                        assert.strictEqual(user.emailVerified, true);
                        assert.ok(!user.emailChange);

                        // Assert there's a mapping for the email address
                        PrincipalsTestUtil.assertUserEmailMapping('foo@users.emails.com', [user.id], function() {

                            // Update the email address through a CSV import
                            PrincipalsTestUtil.importUsers(globalAdminRestContext, tenant.alias, getDataFileStream('users-emails-updated.csv'), 'local', true, function(err) {
                                assert.ok(!err);

                                RestAPI.User.getMe(restContext, function(err, user) {
                                    assert.ok(!err);
                                    assert.strictEqual(user.email, 'bar@users.emails.com');
                                    assert.strictEqual(user.emailVerified, true);
                                    assert.ok(!user.emailChange);

                                    // Assert there's a mapping for the new email address
                                    PrincipalsTestUtil.assertUserEmailMapping('bar@users.emails.com', [user.id], function() {

                                        // Assert there's no mapping for the old email address
                                        PrincipalsTestUtil.assertUserEmailMapping('foo@users.emails.com', [], function() {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that users updating their email address need to verify it
         */
        it('verify users updating their email address need to verify it', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                assert.ok(!err);

                var oldEmailAddress = simong.user.email;

                // Sanity-check the email address is verified
                RestAPI.User.getMe(simong.restContext, function(err, me) {
                    assert.ok(!err);
                    assert.strictEqual(me.emailVerified, true);

                    // Sanity-check there's a mapping for it
                    PrincipalsTestUtil.assertUserEmailMapping(me.email, [me.id], function() {

                        // Update the email address
                        var email = TestsUtil.generateTestEmailAddress();
                        PrincipalsTestUtil.assertUpdateUserSucceeds(simong.restContext, simong.user.id, {'email': email}, function(user, token) {

                            // Assert the old mapping is still in place
                            PrincipalsTestUtil.assertUserEmailMapping(oldEmailAddress, [me.id], function() {

                                // Assert there's no mapping for the new email address as it hasn't been verified yet
                                PrincipalsTestUtil.assertUserEmailMapping(email, [], function() {

                                    RestAPI.User.getMe(simong.restContext, function(err, me) {
                                        assert.ok(!err);

                                        // The old email address should still be in place as the new one hasn't
                                        // been verified yet
                                        assert.strictEqual(me.email, oldEmailAddress);

                                        // Assert the desired email address is recorded but not verified yet
                                        assert.strictEqual(me.emailChange, email.toLowerCase());
                                        assert.strictEqual(me.emailVerified, false);

                                        // Assert we can verify the email address
                                        PrincipalsTestUtil.assertVerifyEmailSucceeds(anonymousRestContext, email, token, function() {

                                            // Assert the old mapping is gone
                                            PrincipalsTestUtil.assertUserEmailMapping(oldEmailAddress, [], function() {

                                                // Assert the new mapping is there
                                                PrincipalsTestUtil.assertUserEmailMapping(email, [me.id], function() {
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that users who are reverting to their old email address do not need to verify it
         */
        it('verify users reverting to their old email address do not need to verify it', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, simong) {
                assert.ok(!err);

                var oldEmailAddress = simong.user.email;

                // Sanity-check the email address is verified
                RestAPI.User.getMe(simong.restContext, function(err, me) {
                    assert.ok(!err);
                    assert.strictEqual(me.emailVerified, true);

                    // Update the email address
                    var email = TestsUtil.generateTestEmailAddress();
                    PrincipalsTestUtil.assertUpdateUserSucceeds(simong.restContext, simong.user.id, {'email': email}, function() {
                        RestAPI.User.getMe(simong.restContext, function(err, me) {
                            assert.ok(!err);

                            // The old email address should still be in place as the new one hasn't
                            // been verified yet
                            assert.strictEqual(me.email, oldEmailAddress.toLowerCase());

                            // Assert the desired email address is recorded but not verified yet
                            assert.strictEqual(me.emailChange, email.toLowerCase());
                            assert.strictEqual(me.emailVerified, false);

                            // Revert back to the old email address
                            PrincipalsTestUtil.assertUpdateUserSucceeds(simong.restContext, simong.user.id, {'email': oldEmailAddress}, function() {
                                RestAPI.User.getMe(simong.restContext, function(err, me) {
                                    assert.ok(!err);

                                    // The old email address should still be in place
                                    assert.strictEqual(me.email, oldEmailAddress.toLowerCase());
                                    assert.strictEqual(me.emailVerified, true);

                                    // Verify the desired email address is recorded but not verified
                                    assert.ok(!me.emailChange);

                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
