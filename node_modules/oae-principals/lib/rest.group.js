/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var OAE = require('oae-util/lib/oae');
var OaeUtil = require('oae-util/lib/util');

var PrincipalsAPI = require('./api');
var PrincipalsConstants = require('./constants').PrincipalsConstants;

/**
 * @REST postGroupCreate
 *
 * Create a group
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /group/create
 * @FormParam   {string}        displayName             Name to display for group
 * @FormParam   {string}        [description]           Description of group
 * @FormParam   {string}        [joinable]              Can users join group            [no,request,yes]
 * @FormParam   {string[]}      [managers]              Unique identifier(s) for manager(s) of the group; may be string or array of strings
 * @FormParam   {string[]}      [members]               Unique identifiers(s) for member(s) of the group; may be string or array of strings
 * @FormParam   {string}        [visibility]            Visibility for group            [loggedin,private,public]
 * @Return      {BasicGroup}                            New group object
 */
OAE.tenantRouter.on('post', '/api/group/create', function(req, res) {
    var managers = OaeUtil.toArray(req.body.managers);
    var members = OaeUtil.toArray(req.body.members);

    // Construct a single hash that will contain the permissions
    var memberHash = {};
    _.each(managers, function(userId) {
        memberHash[userId] = PrincipalsConstants.roles.MANAGER;
    });
    _.each(members, function(userId) {
        memberHash[userId] = PrincipalsConstants.roles.MEMBER;
    });


    PrincipalsAPI.createGroup(req.ctx, req.body.displayName, req.body.description, req.body.visibility, req.body.joinable, memberHash, function(err, group) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(201, group);
    });
});

/**
 * @REST getGroupId
 *
 * Get a full group profile by its id
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /group/{id}
 * @PathParam   {string}        id                  The ID of the group for which to get profile
 * @Return      {Group}                             Group object
 */
OAE.tenantRouter.on('get', '/api/group/:id', function(req, res) {
    PrincipalsAPI.getFullGroupProfile(req.ctx, req.params.id, function(err, group) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, group);
    });
});

/**
 * @REST postGroupId
 *
 * Update a group profile
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /group/{id}
 * @PathParam   {string}        id                  The ID of the group for which to update profile
 * @FormParam   {string}        [description]       Description of group
 * @FormParam   {string}        [displayName]       Name to display for group
 * @FormParam   {string}        [joinable]          Can users join group            [no,request,yes]
 * @FormParam   {string}        [visibility]        Visibility of group             [loggedin,private,public]
 * @Return      {BasicGroup}                        Updated group object
 */
OAE.tenantRouter.on('post', '/api/group/:id', function(req, res) {
    // Get the fields we wish to update.
    PrincipalsAPI.updateGroup(req.ctx, req.params.id, req.body, function(err, updatedGroup) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, updatedGroup);
    });
});

/**
 * @REST getGroupIdMembers
 *
 * Get the members of a group
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /group/{id}/members
 * @PathParam   {string}        id                  The ID of the group for which to get members
 * @QueryParam  {number}        [limit]             Maximum number of users to return (defaults to 10, limited to between 1 and 25)
 * @QueryParam  {string}        [start]             Marker for continuing search (starts at beginning by default)
 * @Return      {MembersResponse}                   Members of group
 */
OAE.tenantRouter.on('get', '/api/group/:id/members', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 10, 1, 25);
    PrincipalsAPI.getGroupMembers(req.ctx, req.params.id, req.query.start, limit, function(err, members, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, {'results': members, 'nextToken': nextToken});
    });
});

/**
 * @REST postGroupIdMembers
 *
 * Update the members of a group
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /group/{id}/members
 * @PathParam   {string}            id              The ID of the group for which to update membership
 * @BodyParam   {MembershipUpdate}  body            Updated membership information for individual users or groups
 */
OAE.tenantRouter.on('post', '/api/group/:id/members', function(req, res) {
    // Convert the string 'false' to a proper boolean.
    var members = req.body;
    var principals = _.keys(members);
    for (var i = 0; i < principals.length; i++) {
        if (members[principals[i]] === 'false') {
            members[principals[i]] = false;
        }
    }
    PrincipalsAPI.setGroupMembers(req.ctx, req.params.id, members, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200);
    });
});

/**
 * @REST postGroupIdJoin
 *
 * Join a group as the current user
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /group/{id}/join
 * @PathParam   {string}        id                  The ID of the group to join
 */
OAE.tenantRouter.on('post', '/api/group/:id/join', function(req, res) {
    PrincipalsAPI.joinGroup(req.ctx, req.params.id, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

/**
 * @REST postGroupIdLeave
 *
 * Leave a group as the current user
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /group/{id}/leave
 * @PathParam   {string}        id                  The ID of the group to leave
 */
OAE.tenantRouter.on('post', '/api/group/:id/leave', function(req, res) {
    PrincipalsAPI.leaveGroup(req.ctx, req.params.id, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

/**
 * @REST postGroupIdPicture
 *
 * Set / update a group's large picture for cropping
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /group/{id}/picture
 * @FormParam   {File}          file                Image file containing picture
 * @Return      {BasicGroup}                        Profile of the group
 */
OAE.tenantRouter.on('post', '/api/group/:id/picture', function(req, res) {
    req.files = req.files || {};
    PrincipalsAPI.storePicture(req.ctx, req.params.id, req.files.file, function(err, principal) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // Set the response type to text/plain, as the UI uses an iFrame upload mechanism to support IE9
        // file uploads. If the response type is not set to text/plain, IE9 will try to download the response.
        res.set('Content-Type', 'text/plain');
        res.send(200, principal);
    });
});
