/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var ConfigTestsUtil = require('oae-config/lib/test/util');
var EmailAPI = require('oae-email');
var Library = require('oae-library');
var PrincipalsAPI = require('oae-principals');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests/lib/util');

/**
 * Import a batch of users from a CSV file. This function is a test utility function that wraps the REST API call and listens
 * for the event that indicates that the user import has fully finised, as the actual loading of users is an asynchronous
 * operation.
 *
 * @see RestAPI.Admin#importUsers for the meaning of the method parameters
 */
var importUsers = module.exports.importUsers = function(restCtx, tenantAlias, csvGenerator, authenticationStrategy, forceProfileUpdate, callback) {
    RestAPI.Admin.importUsers(restCtx, tenantAlias, csvGenerator, authenticationStrategy, forceProfileUpdate, function(err) {
        if (err) {
            return callback(err);
        }

        PrincipalsAPI.once('postCSVUserImport', callback);
    });
};

/**
 * Fetch the full memberships library, not just a single page
 *
 * @param  {RestContext}    restCtx         The REST context to use to fetch the memberships library
 * @param  {String}         libraryId       The id of the principal whose memberships library to fetch
 * @param  {Function}       callback        Standard callback function
 * @param  {Group[]}        callback.groups The memberships in the library
 */
var getFullMembershipsLibrary = module.exports.getFullMembershipsLibrary = function(restCtx, libraryId, callback, _memberships, _nextToken) {
    _memberships = _memberships || [];
    RestAPI.Group.getMembershipsLibrary(restCtx, libraryId, _nextToken, 25, function(err, response) {
        assert.ok(!err);
        _.each(response.results, function(membership) {
            _memberships.push(membership);
        });

        if (response.nextToken) {
            return getFullMembershipsLibrary(restCtx, libraryId, callback, _memberships, response.nextToken);
        } else {
            return callback(_memberships);
        }
    });
};

/**
 * Add the provided member user to all the groups in the provided tenants.
 *
 * @param  {Object}         memberUser              An object containing the User and RestContext of the user to add as a member
 * @param  {RestContext}    memberUser.restContext  The rest context of the member user
 * @param  {User}           memberUser.user         The user object of the member user
 * @param  {Object}         publicTenant1           An object containing the public, loggedin and private group to which to add the user as a member
 * @param  {Object}         publicTenant2           An object containing the public, loggedin and private group to which to add the user as a member
 * @param  {Object}         privateTenant           An object containing the public, loggedin and private group to which to add the user as a member
 * @param  {Function}       callback                Standard callback function
 * @throws {Error}                                  An assertion error is thrown if there are any errors adding the users to the groups
 */
var addUserToAllGroups = module.exports.addUserToAllGroups = function(memberUser, publicTenant1, publicTenant2, privateTenant, callback) {
    // Temporarily make the private tenant public
    ConfigTestsUtil.updateConfigAndWait(TestsUtil.createGlobalAdminRestContext(), privateTenant.tenant.alias, {'oae-tenants/tenantprivacy/tenantprivate': false}, function(err) {
        assert.ok(!err);

        var permissions = {};
        permissions[memberUser.user.id] = 'member';

        // Add the user to all the first public tenant groups
        RestAPI.Group.setGroupMembers(publicTenant1.adminRestContext, publicTenant1.publicGroup.id, permissions, function(err) {
            assert.ok(!err);
            RestAPI.Group.setGroupMembers(publicTenant1.adminRestContext, publicTenant1.loggedinGroup.id, permissions, function(err) {
                assert.ok(!err);
                RestAPI.Group.setGroupMembers(publicTenant1.adminRestContext, publicTenant1.privateGroup.id, permissions, function(err) {
                    assert.ok(!err);

                    // Add the user to all the second public tenant groups
                    RestAPI.Group.setGroupMembers(publicTenant2.adminRestContext, publicTenant2.publicGroup.id, permissions, function(err) {
                        assert.ok(!err);
                        RestAPI.Group.setGroupMembers(publicTenant2.adminRestContext, publicTenant2.loggedinGroup.id, permissions, function(err) {
                            assert.ok(!err);
                            RestAPI.Group.setGroupMembers(publicTenant2.adminRestContext, publicTenant2.privateGroup.id, permissions, function(err) {
                                assert.ok(!err);

                                // Add the user to all the private tenant groups
                                RestAPI.Group.setGroupMembers(privateTenant.adminRestContext, privateTenant.publicGroup.id, permissions, function(err) {
                                    assert.ok(!err);
                                    RestAPI.Group.setGroupMembers(privateTenant.adminRestContext, privateTenant.loggedinGroup.id, permissions, function(err) {
                                        assert.ok(!err);
                                        RestAPI.Group.setGroupMembers(privateTenant.adminRestContext, privateTenant.privateGroup.id, permissions, function(err) {
                                            assert.ok(!err);

                                            // Make the private tenant private again
                                            ConfigTestsUtil.updateConfigAndWait(TestsUtil.createGlobalAdminRestContext(), privateTenant.tenant.alias, {'oae-tenants/tenantprivacy/tenantprivate': true}, function(err) {
                                                assert.ok(!err);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};


/**
 * Update all of the provided groups with the given modifications
 *
 * @param  {Object}     publicTenant1   An object containing the public, loggedin and private group to update
 * @param  {Object}     publicTenant2   An object containing the public, loggedin and private group to update
 * @param  {Object}     privateTenant   An object containing the public, loggedin and private group to update
 * @param  {Object}     modifications   An object keyed by the name of the field to update, whose value is the value to which to set the field
 * @param  {Function}   callback        Standard callback function
 * @throws {Error}                      An assertion error is thrown if there are any errors adding the users to the groups
 */
var updateAllGroups = module.exports.updateAllGroups = function(publicTenant1, publicTenant2, privateTenant, modifications, callback) {
    // Update the groups from publicTenant1
    RestAPI.Group.updateGroup(publicTenant1.adminRestContext, publicTenant1.publicGroup.id, modifications, function(err) {
        assert.ok(!err);
        RestAPI.Group.updateGroup(publicTenant1.adminRestContext, publicTenant1.loggedinGroup.id, modifications, function(err) {
            assert.ok(!err);
            RestAPI.Group.updateGroup(publicTenant1.adminRestContext, publicTenant1.privateGroup.id, modifications, function(err) {
                assert.ok(!err);

                // Update the groups from publicTenant2
                RestAPI.Group.updateGroup(publicTenant2.adminRestContext, publicTenant2.publicGroup.id, modifications, function(err) {
                    assert.ok(!err);
                    RestAPI.Group.updateGroup(publicTenant2.adminRestContext, publicTenant2.loggedinGroup.id, modifications, function(err) {
                        assert.ok(!err);
                        RestAPI.Group.updateGroup(publicTenant2.adminRestContext, publicTenant2.privateGroup.id, modifications, function(err) {
                            assert.ok(!err);

                            // Update the groups from privateTenant
                            RestAPI.Group.updateGroup(privateTenant.adminRestContext, privateTenant.publicGroup.id, modifications, function(err) {
                                assert.ok(!err);
                                RestAPI.Group.updateGroup(privateTenant.adminRestContext, privateTenant.loggedinGroup.id, modifications, function(err) {
                                    assert.ok(!err);
                                    RestAPI.Group.updateGroup(privateTenant.adminRestContext, privateTenant.privateGroup.id, modifications, function(err) {
                                        assert.ok(!err);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

/**
 * Convenience function that uploads and crops an image for a principal
 *
 * @param  {RestContext}    restCtx                             The REST context to use to upload the picture
 * @param  {String}         principalId                         The id of the principal (User or Group) whose picture to upload and crop
 * @param  {Function}       getPictureStream                    A function that will return the stream to the picture file
 * @param  {Object}         selectedArea                        An object representing the selected area to crop
 * @param  {Number}         selectedArea.x                      The specified horizontal position to crop
 * @param  {Number}         selectedArea.y                      The specified vertical position to crop
 * @param  {Number}         selectedArea.width                  The width/height of the square to crop at the specified position
 * @param  {Function}       callback                            Standard callback function
 * @param  {User|Group}     callback.uploadPicturePrincipal     The principal object returned from the upload picture request
 * @param  {User|Group}     callback.cropPicturePrincipal       The principal object returned from the crop picture request
 * @throws {AssertionError}                                     Thrown if an error occurs while uploading and cropping the picture
 */
var uploadAndCropPicture = module.exports.uploadAndCropPicture = function(restCtx, principalId, getPictureStream, selectedArea, callback) {
    RestAPI.User.uploadPicture(restCtx, principalId, getPictureStream, null, function(err, uploadPicturePrincipal) {
        assert.ok(!err);
        RestAPI.Crop.cropPicture(restCtx, principalId, selectedArea, function(err, cropPicturePrincipal) {
            assert.ok(!err);
            return callback(uploadPicturePrincipal, cropPicturePrincipal);
        });
    });
};

/**
 * Attempt to join a group, ensuring it fails with the specified HTTP code
 *
 * @param  {RestContext}    userRestCtx     The REST context of the user to try and join the group
 * @param  {String}         groupId         The id of the group to try and join
 * @param  {Number}         httpCode        The expected HTTP code of the failure
 * @param  {Function}       callback        Invoked when the join operation fails as expected
 * @throws {AssertionError}                 Thrown if the join operation did not fail with the expected code
 */
var assertJoinGroupFails = module.exports.assertJoinGroupFails = function(userRestCtx, groupId, httpCode, callback) {
    RestAPI.Group.joinGroup(userRestCtx, groupId, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        return callback();
    });
};

/**
 * Attempt to join a group, ensuring it succeeds. It will also verify standard expected results of
 * joining a group, such as:
 *
 *  * The user gets added to the group members of the group
 *  * The group gets added to the user's memberships library
 *  * The group's lastModified property gets updated
 *
 * @param  {RestContext}    managerRestCtx  The REST context of a user who is a manager of the group
 * @param  {RestContext}    userRestCtx     The REST context of the user who is to join the group
 * @param  {String}         groupId         The id of the group to join
 * @param  {Function}       callback        Invoked when the group has been joined as expected
 * @throws {AssertionError}                 Thrown if the join is unsuccessful or the expected results of joining a group don't hold true
 */
var assertJoinGroupSucceeds = module.exports.assertJoinGroupSucceeds = function(managerRestCtx, userRestCtx, groupId, callback) {
    // Get the user joining the group, we will need their id
    RestAPI.User.getMe(userRestCtx, function(err, me) {
        assert.ok(!err);

        // Get the group. We will want to make sure its timestamp is updated
        RestAPI.Group.getGroup(managerRestCtx, groupId, function(err, groupBefore) {
            assert.ok(!err);

            // Get the group members. We will want to make sure the user in context gets added to
            // the list of members by adding them into the expected list of members
            getAllGroupMembers(managerRestCtx, groupId, null, function(membersBefore) {
                var expectedMemberIds =
                    _.chain(membersBefore)
                        .pluck('profile')
                        .pluck('id')
                        .value()
                        .concat(me.id);

                // Get the memberships. We will want to make sure the group gets added to the user's
                // membership library by adding it to the expected list of memberships
                getAllMembershipsLibrary(userRestCtx, me.id, null, function(membershipsBefore) {
                    var expectedMembershipIds =
                        _.chain(membershipsBefore)
                            .pluck('id')
                            .value()
                            .concat(groupId);

                    // Perform the actual join action, ensuring it reports successful
                    RestAPI.Group.joinGroup(userRestCtx, groupId, function(err) {
                        assert.ok(!err);

                        // Joining a group leaves some asynchronous library index updates to happen,
                        // wait for those to complete
                        Library.Index.whenUpdatesComplete(function() {

                            // Ensure the user is added to the group members
                            assertGroupMembersEquals(managerRestCtx, groupId, expectedMemberIds, function() {

                                // Ensure the group is added to the user memberships library
                                assertMembershipsLibraryEquals(userRestCtx, me.id, expectedMembershipIds, function() {

                                    // Ensure the group lastModified timestamp is updated
                                    RestAPI.Group.getGroup(managerRestCtx, groupId, function(err, groupAfter) {
                                        assert.ok(!err);
                                        assert.ok(groupBefore.lastModified < groupAfter.lastModified);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

/**
 * Attempt to leave a group, ensuring that the operation fails with the given HTTP code
 *
 * @param  {RestContext}    userRestCtx     The REST context of the user who will try to leave the group
 * @param  {String}         groupId         The id of the group to try and leave
 * @param  {Number}         httpCode        The expected HTTP code of the failed leave operation
 * @param  {Function}       callback        Invoked when the leave operation fails as expected
 * @throws {AssertionError}                 Thrown if the leave operation does not fail as expected
 */
var assertLeaveGroupFails = module.exports.assertLeaveGroupFails = function(userRestCtx, groupId, httpCode, callback) {
    RestAPI.Group.leaveGroup(userRestCtx, groupId, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        return callback();
    });
};

/**
 * Attempt to leave a group, ensuring it succeeds. It will also verify standard expected results of
 * leaving a group, such as:
 *
 *  * The user gets removed from the group members of the group
 *  * The group gets removed from the user's memberships library
 *  * The group's lastModified property does not get updated
 *
 * @param  {RestContext}    managerRestCtx  The REST context of a user who is a manager of the group
 * @param  {RestContext}    userRestCtx     The REST context of the user who is to join the group
 * @param  {String}         groupId         The id of the group to join
 * @param  {Function}       callback        Invoked when the group has been joined as expected
 * @throws {AssertionError}                 Thrown if the join is unsuccessful or the expected results of joining a group don't hold true
 */
var assertLeaveGroupSucceeds = module.exports.assertLeaveGroupSucceeds = function(managerRestCtx, userRestCtx, groupId, callback) {
    // Get the user leaving the group, we will need their id
    RestAPI.User.getMe(userRestCtx, function(err, me) {
        assert.ok(!err);

        // Get the group, so we have a copy of its lastModified field before leaving
        RestAPI.Group.getGroup(managerRestCtx, groupId, function(err, groupBefore) {
            assert.ok(!err);

            // Determine the expected members after leaving the group by removing it from the current
            // set of members
            getAllGroupMembers(managerRestCtx, groupId, null, function(membersBefore) {
                var expectedMemberIdsAfter =
                    _.chain(membersBefore)
                        .pluck('profile')
                        .pluck('id')
                        .filter(function(memberBeforeId) {
                            return memberBeforeId !== me.id;
                        })
                        .value();

                // Determine the expected memberships after leaving the group by removing the group from
                // the current set of memberships
                getAllMembershipsLibrary(userRestCtx, me.id, null, function(membershipsBefore) {
                    var expectedMembershipIdsAfter =
                        _.chain(membershipsBefore)
                            .pluck('id')
                            .filter(function(membershipBeforeId) {
                                return membershipBeforeId !== groupId;
                            })
                            .value();

                    // Perform the actual leave action, ensuring it reports successful
                    RestAPI.Group.leaveGroup(userRestCtx, groupId, function(err) {
                        assert.ok(!err);

                        // Ensure the members are what we expect
                        assertGroupMembersEquals(managerRestCtx, groupId, expectedMemberIdsAfter, function() {

                            // Ensure the memberships are what we expect
                            assertMembershipsLibraryEquals(userRestCtx, me.id, expectedMembershipIdsAfter, function() {

                                // Get the group after it has been left, ensuring that its lastModified
                                // date hasn't been updated
                                RestAPI.Group.getGroup(managerRestCtx, groupId, function(err, groupAfter) {
                                    assert.ok(!err);
                                    assert.strictEqual(groupBefore.lastModified, groupAfter.lastModified);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

/**
 * Ensure that the group members listing of the group is the same as the provided expected member ids
 *
 * @param  {RestContext}    restCtx             The REST context of the user with which to check the group members
 * @param  {String}         groupId             The id of the group whose members to check
 * @param  {String[]}       expectedMemberIds   The ids of the members we expect to find in the group
 * @param  {Function}       callback            Invoked when the members have been successfully validated
 * @throws {AssertionError}                     Thrown if there is an issue getting the members or if they are not as expected
 */
var assertGroupMembersEquals = module.exports.assertGroupMembersEquals = function(restCtx, groupId, expectedMemberIds, callback) {
    getAllGroupMembers(restCtx, groupId, null, function(members) {
        // Pluck out the member ids, do not care about sorting
        var actualMemberIds = _.chain(members).pluck('profile').pluck('id').value().sort();
        assert.deepEqual(actualMemberIds, expectedMemberIds.sort());
        return callback();
    });
};

/**
 * Ensure that the memberships library of the user is the same as the provided expected group ids
 *
 * @param  {RestContext}    restCtx                 The REST context of the user with which to check the memberships library
 * @param  {String}         groupId                 The id of the user whose memberships library to check
 * @param  {String[]}       expectedMembershipIds   The ids of the memberships we expect to find in the library
 * @param  {Function}       callback                Invoked when the memberships have been successfully validated
 * @throws {AssertionError}                         Thrown if there is an issue getting the memberships or if they are not as expected
 */
var assertMembershipsLibraryEquals = module.exports.getAllMembershipsLibrary = function(restCtx, userId, expectedMembershipIds, callback) {
    getAllMembershipsLibrary(restCtx, userId, null, function(memberships) {
        // Pluck out the membership ids, do not care about sorting
        assert.deepEqual(_.pluck(memberships, 'id').sort(), expectedMembershipIds.sort());
        return callback();
    });
};

/**
 * Get all items in a user's memberships library
 *
 * @param  {RestContext}    restCtx                 The context of the user with which to fetch the memberships library
 * @param  {String}         userId                  The id of the user whose memberships library to fetch
 * @param  {Object}         [opts]                  Optional flags for fetching the group memberships library
 * @param  {Number}         [opts.batchSize]        The number of items to fetch per page when fetching the memberships library
 * @param  {Function}       callback                Standard callback function
 * @param  {Object[]}       callback.memberships    All membership entries in the memberships library of the user
 * @param  {Object[]}       callback.responses      All raw responses that were receive when fetching the memberships library page by page
 */
var getAllMembershipsLibrary = module.exports.getAllMembershipsLibrary = function(restCtx, userId, opts, callback, _nextToken, _groupMemberships, _responses) {
    opts = opts || {};
    opts.batchSize = opts.batchSize || 12;
    _groupMemberships = _groupMemberships || [];
    _responses = _responses || [];
    if (_nextToken === null) {
        return callback(_groupMemberships, _responses);
    }

    // Get the current page of membership entries
    RestAPI.Group.getMembershipsLibrary(restCtx, userId, _nextToken, opts.batchSize, function(err, response) {
        assert.ok(!err);
        _responses.concat(response);
        _groupMemberships = _.union(_groupMemberships, response.results);
        _nextToken = response.nextToken;
        return getAllMembershipsLibrary(restCtx, userId, opts, callback, _nextToken, _groupMemberships, _responses);
    });
};

/**
 * Get all items in a group's members list
 *
 * @param  {RestContext}    restCtx                 The context of the user with which to fetch the members
 * @param  {String}         groupId                 The id of the group whose members to fetch
 * @param  {Object}         [opts]                  Optional flags for fetching the group members
 * @param  {Number}         [opts.batchSize]        The number of members to fetch per page
 * @param  {Function}       callback                Standard callback function
 * @param  {Object[]}       callback.memberships    All members of the group
 * @param  {Object[]}       callback.responses      All raw responses that were receive when fetching the members page by page
 */
var getAllGroupMembers = module.exports.getAllGroupMembers = function(restCtx, groupId, opts, callback, _nextToken, _members, _responses) {
    opts = opts || {};
    opts.batchSize = opts.batchSize || 12;
    _members = _members || [];
    _responses = _responses || [];
    if (_nextToken === null) {
        return callback(_members, _responses);
    }

    // Get the current page of group members
    RestAPI.Group.getGroupMembers(restCtx, groupId, _nextToken, opts.batchSize, function(err, response) {
        assert.ok(!err);
        _responses.concat(response);
        _members = _.union(_members, response.results);
        _nextToken = response.nextToken;
        return getAllGroupMembers(restCtx, groupId, opts, callback, _nextToken, _members, _responses);
    });
};

/**
 * Assert that a user can be created
 *
 * @param  {RestContext}    restCtx             The REST context of a user who can create a user account
 * @param  {Object}         params              The parameters to create the user with
 * @param  {Function}       callback            Invoked when the user has been created an the verification email has been sent
 * @param  {String}         callback.user       The created user
 * @param  {String}         callback.token      The email verification token
 * @throws {AssertionError}                     Thrown if the create is unsuccessful
 */
var assertCreateUserSucceeds = module.exports.assertCreateUserSucceeds = function(restCtx, params, callback) {
    var user = null;
    var token = null;
    RestAPI.User.createUser(restCtx, params.username, params.password, params.displayName, params.email, params, function(err, _user) {
        assert.ok(!err);
        user = _user;
        done();
    });

    whenVerificationEmailSent(params.email, function(_token) {
        token = _token;
        done();
    });

    var done = _.after(2, function() {
        return callback(user, token);
    });
};

/**
 * Attempt to update a user's profile, ensuring it succeeds. It will also verify the changes were
 * persisted correctly by retrieving the user's profile
 *
 * @param  {RestContext}    restCtx             The REST context of a user who can perform the update
 * @param  {String}         userId              The id of the user to update
 * @param  {Object}         update              Object representing the profile fields that need to be updated. The keys are the profile fields, the values are the profile field values
 * @param  {Function}       callback            Invoked when the user has been updated
 * @param  {User}           callback.user       The updated user profile
 * @throws {AssertionError}                     Thrown if the update is unsuccessful or the expected results of updating a user don't hold true
 */
var assertUpdateUserSucceeds = module.exports.assertUpdateUserSucceeds = function(restCtx, userId, update, callback) {
    RestAPI.User.updateUser(restCtx, userId, update, function(err) {
        assert.ok(!err);

        // Assert the changes were persisted correctly
        RestAPI.User.getUser(restCtx, userId, function(err, user) {
            assert.ok(!err);
            _.each(update, function(value, key) {
                // Email changes only get reflected in the user profile if they are done by administrators
                if (key !== 'email') {
                    assert.strictEqual(user[key], value);
                }
            });

            return callback(user);
        });
    });
};

/**
 * Attempt to update a user's profile, ensuring that the operation fails with the given HTTP code
 *
 * @param  {RestContext}    restCtx         The REST context of a user who can perform the update
 * @param  {String}         userId          The id of the user to update
 * @param  {Object}         update          Object representing the profile fields that need to be updated. The keys are the profile fields, the values are the profile field values
 * @param  {Number}         httpCode        The expected HTTP code of the failed update operation
 * @param  {Function}       callback        Invoked when the update user operation fails as expected
 * @throws {AssertionError}                 Thrown if the update operation does not fail as expected
 */
var assertUpdateUserFails = module.exports.assertUpdateUserFails = function(restCtx, userId, update, httpCode, callback) {
    RestAPI.User.updateUser(restCtx, userId, update, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        return callback();
    });
};

/**
 * Assert that an email address can be verified
 *
 * @param  {RestContext}    restCtx         The REST context of a user who can perform the request
 * @param  {String}         email           The email address to verify
 * @param  {String}         token           The token that can be used to verify the email address
 * @param  {Function}       callback        Invoked when the verify operation succeeds
 * @param  {Object}         callback.err    An error that occurred, if any
 * @throws {AssertionError}                 Thrown if the operation is unsuccessful or the expected results of verifying an email don't hold true
 */
var assertVerifyEmailSucceeds = module.exports.assertVerifyEmailSucceeds = function(restCtx, email, token, callback) {
    // Determine whether the user is anonymous. The verifyEmail endpoint will sign the user in if
    // they are anonymous and will return the user profile if they're not
    RestAPI.User.getMe(restCtx, function(err, me) {
        assert.ok(!err);
        var wasAnonymous = me.anon;

        RestAPI.User.verifyEmail(restCtx, email, token, function(err, user, response) {
            assert.ok(!err);

            // If the user was anonymous they should've been redirected to the /me page
            if (wasAnonymous) {
                assert.strictEqual(response.headers.location, '/me');

            // Otherwise the user profile is returned
            } else {
                assert.strictEqual(user.emailVerified, true);
                assert.strictEqual(user.email, email);
                assert.ok(!user.emailChange);
            }

            // Verify the email is now properly set and verified
            RestAPI.User.getMe(restCtx, function(err, me) {
                assert.ok(!err);
                assert.ok(!me.anon);
                assert.strictEqual(me.emailVerified, true);
                assert.strictEqual(me.email, email);
                assert.ok(!me.emailChange);

                // Assert the email address is also marked as verified when retrieving the user profile
                RestAPI.User.getUser(restCtx, me.id, function(err, user) {
                    assert.ok(!err);
                    assert.strictEqual(user.emailVerified, true);
                    assert.strictEqual(user.email, email);
                    assert.ok(!user.emailChange);

                    return callback();
                });
            });
        });
    });
};

/**
 * Assert that an email address can not be verified
 *
 * @param  {RestContext}    restCtx         The REST context of a user who can perform the request
 * @param  {String}         email           The email address to verify
 * @param  {String}         token           The token that can be used to verify the email address
 * @param  {Function}       callback        Invoked when the verify operation fails as expected
 * @param  {Object}         callback.err    An error that occurred, if any
 * @throws {AssertionError}                 Thrown if the operation is unsuccessful or the expected results of verifying an email don't hold true
 */
var assertVerifyEmailFails = module.exports.assertVerifyEmailFails = function(restCtx, email, token, httpCode, callback) {
    RestAPI.User.verifyEmail(restCtx, email, token, function(err, user, response) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        return callback();
    });
};

/**
 * Execute a callback function when a verification email is sent
 *
 * @param  {String}     [email]             The email address to which the token should've been sent
 * @param  {Function}   callback            Standard callback function
 * @param  {String}     callback.token      The email verification token that was sent to the user
 */
var whenVerificationEmailSent = module.exports.whenVerificationEmailSent = function(email, callback) {
    EmailAPI.once('debugSent', function(message) {
        // Verify the email address
        if (email) {
            assert.strictEqual(message.to[0].address, email);
        }

        // Verify a token is passed in both the html and text email
        assert.ok(message.html.match(/\?token=(email-[a-zA-Z0-9]{32})/));
        assert.ok(message.text.match(/\?token=(email-[a-zA-Z0-9]{32})/));

        // Verify a token is passed in the email
        var token = message.text.match(/\?token=(email-[a-zA-Z0-9]{32})/)[1];
        assert.ok(token);
        token = decodeURIComponent(token);

        return callback(token);
    });
};
