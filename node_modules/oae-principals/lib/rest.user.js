/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Recaptcha = require('recaptcha').Recaptcha;
var util = require('util');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var LoginId = require('oae-authentication/lib/model').LoginId;
var OAE = require('oae-util/lib/oae');
var OaeUtil = require('oae-util/lib/util');
var PrincipalsConfig = require('oae-config').config('oae-principals');

var Context = require('oae-context').Context;
var TenantsAPI = require('oae-tenants');

var PrincipalsAPI = require('./api');

/**
 * Handle a request that gets a user's `me` feed
 *
 * @param  {Request}    req     The express Request object
 * @param  {Response}   res     The express Response object
 * @api private
 */
var _handleGetMe = function(req, res) {
    PrincipalsAPI.getMe(req.ctx, function(err, meData) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, meData);
    });
};

/**
 * Handle a request that gets a user's full profile information
 *
 * @param  {Request}    req             The express Request object
 * @param  {String}     req.params.id   The id of the user whose profile to get
 * @param  {Response}   res             The express Response object
 * @api private
 */
var _handleGetFullProfile = function(req, res) {
    PrincipalsAPI.getFullUserProfile(req.ctx, req.params.id, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, user);
    });
};

/**
 * Handle a request that imports a bulk set of users from an uploaded CSV file
 *
 * @param  {Request}    req                                 The express Request object
 * @param  {String}     req.body.authenticationStrategy     The authentication strategy to use when creating the user login ids
 * @param  {String}     [req.body.forceProfileUpdate]       If `'true'`, indicates that profiles should be updated with the given data, not just created. Otherwise, profiles will only be created if they don't already have a matching external id in the provided authentication strategy
 * @param  {String}     [req.body.tenantAlias]              The target tenant in which to import the users. Defaults to the tenant on which the request was made
 * @param  {File}       [req.files.file]                    An express File object representing the CSV file stream
 * @param  {Response}   res                                 The express Response object
 * @api private
 */
var _handleImportUsers = function(req, res) {
    var forceProfileUpdate = (req.body.forceProfileUpdate === 'true');
    PrincipalsAPI.importUsers(req.ctx, req.body.tenantAlias, req.files.file, req.body.authenticationStrategy, forceProfileUpdate, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // Set the response type to text/plain, as the UI uses an iFrame upload mechanism to support IE9
        // file uploads. If the response type is not set to text/plain, IE9 will try to download the response
        res.set('Content-Type', 'text/plain');
        return res.send(200);
    });
};

/**
 * Handle a request that updates a user
 *
 * @param  {Request}    req             The express Request object
 * @param  {String}     req.params.id   The id of the user to update
 * @param  {Object}     req.body        The profile fields and values to apply to the user
 * @param  {Response}   res             The express Response object
 * @api private
 */
var _handleUpdateUser = function(req, res) {
    PrincipalsAPI.updateUser(req.ctx, req.params.id, req.body, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, user);
    });
};

/**
 * Handle a request to promote or demote a user to or from being a tenant admin
 *
 * @param  {Request}    req             The express Request object
 * @param  {String}     req.params.id   The id of the user whose profile to get
 * @param  {String}     req.body.admin  `'true'` or `1` if the user should be set to an admin. `'false'` or `0` to ensure they are not an admin
 * @param  {Response}   res             The express Response object
 * @api private
 */
var _handleSetTenantAdmin = function(req, res) {
    PrincipalsAPI.setTenantAdmin(req.ctx, req.params.id, req.body.admin, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
};

/**
 * Handle a request to create a private tenant administrator user
 *
 * @param  {Request}    req                         The express Request object
 * @param  {String}     [req.params.tenantAlias]    The tenant in which to create the tenant admin user. Defaults to the tenant of the current request
 * @param  {String}     req.body.displayName        The display name of the user
 * @param  {String}     req.body.username           The username the user will use to login
 * @param  {String}     req.body.password           The password the user will use to login
 * @param  {String}     [req.body.email]            The email address of the user
 * @param  {String}     [req.body.locale]           The user's locale
 * @param  {String}     [req.body.timezone]         The user's timezone
 * @param  {String}     [req.body.publicAlias]      The public alias of the user
 * @param  {String}     [req.body.acceptedTC]       `'true'` if the user has accepted the terms and conditions. Any other value indicates they have not
 * @param  {Response}   res                         The express Response object
 * @api private
 */
var _handleCreateTenantAdminUser = function(req, res) {
    var ctx = req.ctx;
    var tenantAlias = req.params.tenantAlias || ctx.tenant().alias;
    var loginId = new LoginId(tenantAlias, AuthenticationConstants.providers.LOCAL, req.body.username, {'password': req.body.password});
    var opts = _getOptionalProfileParameters(req.body);

    // Create the user as a tenant admin
    AuthenticationAPI.createTenantAdminUser(ctx, loginId, req.body.displayName, opts, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(201, user);
    });
};

/**
 * @REST postUserIdPicture
 *
 * Set a user's profile picture
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /user/{id}/picture
 * @PathParam   {string}        id                  The ID of the user
 * @FormParam   {File}          file                Image file for profile picture
 * @Return      {User}                              Returns an object representing the profile of the user
 */
OAE.tenantRouter.on('post', '/api/user/:id/picture', function(req, res) {
    req.files = req.files || {};
    PrincipalsAPI.storePicture(req.ctx, req.params.id, req.files.file, function(err, principal) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // Set the response type to text/plain, as the UI uses an iFrame upload mechanism to support IE9
        // file uploads. If the response type is not set to text/plain, IE9 will try to download the response.
        res.set('Content-Type', 'text/plain');
        return res.send(200, principal);
    });
});

/**
 * @REST getUserIdMemberships
 *
 * Get the list of groups a user is a member of
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /user/{id}/memberships
 * @PathParam   {string}        id                  The ID of the user for which to get groups
 * @QueryParam  {number}        [limit]             Maximum number of groups to return (defaults to 10, limited to between 1 and 25)
 * @QueryParam  {string}        [start]             Marker for continuing search (starts at beginning by default)
 * @Return      {MembershipsResponse}               Returns an object containing memberships
 */
OAE.tenantRouter.on('get', '/api/user/:id/memberships', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 10, 1, 25);
    PrincipalsAPI.getMembershipsLibrary(req.ctx, req.params.id, req.query.start, limit, function(err, memberships, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': memberships, 'nextToken': nextToken});
    });
});

/**
 * @REST getUserTermsAndConditions
 *
 * Return the Terms and Conditions for the current tenant
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /user/termsAndConditions
 * @Return      {TermsAndConditions}                Returns an object containing terms and conditions
 */
OAE.tenantRouter.on('get', '/api/user/termsAndConditions', function(req, res) {
    var termsAndConditions = PrincipalsAPI.getTermsAndConditions(req.ctx, req.query.locale);
    res.send(200, termsAndConditions);
});

/**
 * @REST postUserIdTermsAndConditions
 *
 * Accept the Terms and Conditions
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /user/{id}/termsAndConditions
 * @PathParam   {string}        id                  The ID of the user accepting the terms and conditions
 * @Return      {User}                              Returns an object containing updated user profile
 */
OAE.tenantRouter.on('post', '/api/user/:id/termsAndConditions', function(req, res) {
    PrincipalsAPI.acceptTermsAndConditions(req.ctx, req.params.id, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, user);
    });
});

/**
 * @REST postUserCreateGlobalAdminUser
 *
 * Create a global admin user with mapped local authentication credentials
 *
 * @Server      admin
 * @Method      POST
 * @Path        /user/createGlobalAdminUser
 * @FormParam   {boolean}       [acceptedTC]            Has user accepted terms and conditions
 * @FormParam   {string}        displayName             Name to display for user
 * @FormParam   {string}        [email]                 Email address for user
 * @FormParam   {string}        [emailPreference]       Email preferences for user      [daily,immediate,weekly]
 * @FormParam   {string}        [locale]                Locale for user (e.g. en_US)
 * @FormParam   {string}        password                Local password for user
 * @FormParam   {string}        [publicAlias]           Public alias for user
 * @FormParam   {string}        username                Unique username
 * @FormParam   {string}        [visibility]            Visibility of user              [loggedin,private,public]
 * @Return      {User}                                  Returns an object containing updated user profile
 */
OAE.globalAdminRouter.on('post', '/api/user/createGlobalAdminUser', function(req, res) {
    var opts = _getOptionalProfileParameters(req.body);

    // Create the user as global admin
    AuthenticationAPI.getOrCreateGlobalAdminUser(req.ctx, req.body.username, req.body.password, req.body.displayName, opts, function(err, user, created) {
        if (err) {
            return res.send(err.code, err.msg);
        } else if (!created) {
            return res.send(400, util.format('A user with username "%s" already exists', req.body.username));
        }

        return res.send(201, user);
    });
});

/**
 * @REST postUserTenantAliasCreateTenantAdminUser
 *
 * Create a tenant admin user with mapped local authentication credentials
 *
 * @Server      admin
 * @Method      POST
 * @Path        /user/{tenantAlias}/createTenantAdminUser
 * @PathParam   {string}        tenantAlias         The unique identifier for the tenant
 * @FormParam   {boolean}       [acceptedTC]        Has user accepted terms and conditions
 * @FormParam   {string}        displayName         Name to display for user
 * @FormParam   {string}        [email]             Email address for user
 * @FormParam   {string}        [emailPreference]   Email preferences for user      [daily,immediate,weekly]
 * @FormParam   {string}        [locale]            Locale for user (e.g. en_US)
 * @FormParam   {string}        password            Local password for user
 * @FormParam   {string}        [publicAlias]       Public alias for user
 * @FormParam   {string}        username            Unique username
 * @FormParam   {string}        [visibility]        Visibility of user              [loggedin,private,public]
 * @Return      {User}                              Returns an object containing updated user profile
 */
OAE.globalAdminRouter.on('post', '/api/user/:tenantAlias/createTenantAdminUser', _handleCreateTenantAdminUser);

/**
 * @REST postUserCreateTenantAdminUser
 *
 * Create a tenant admin user with mapped local authentication credentials
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /user/createTenantAdminUser
 * @FormParam   {boolean}       [acceptedTC]        Has user accepted terms and conditions
 * @FormParam   {string}        displayName         Name to display for user
 * @FormParam   {string}        [email]             Email address for user
 * @FormParam   {string}        [emailPreference]   Email preferences for user      [daily,immediate,weekly]
 * @FormParam   {string}        [locale]            Locale for user (e.g. en_US)
 * @FormParam   {string}        password            Local password for user
 * @FormParam   {string}        [publicAlias]       Public alias for user
 * @FormParam   {string}        username            Unique username
 * @FormParam   {string}        [visibility]        Visibility of user              [loggedin,private,public]
 * @Return      {User}                              Returns an object containing updated user profile
 */
OAE.tenantRouter.on('post', '/api/user/createTenantAdminUser', _handleCreateTenantAdminUser);

/**
 * @REST postUserTenantAliasCreate
 *
 * Create a new user with a local login strategy
 *
 * @Server      admin
 * @Method      POST
 * @Path        /user/{tenantAlias}/create
 * @PathParam   {string}        tenantAlias         The unique identifier for the tenant
 * @FormParam   {boolean}       [acceptedTC]        Has user accepted terms and conditions
 * @FormParam   {string}        displayName         Name to display for user
 * @FormParam   {string}        [email]             Email address for user
 * @FormParam   {string}        [emailPreference]   Email preferences for user      [daily,immediate,weekly]
 * @FormParam   {string}        [locale]            Locale for user (e.g. en_US)
 * @FormParam   {string}        password            Local password for user
 * @FormParam   {string}        [publicAlias]       Public alias for user
 * @FormParam   {string}        username            Unique username
 * @FormParam   {string}        [visibility]        Visibility of user              [loggedin,private,public]
 * @Return      {User}                              Returns an object containing updated user profile
 */
OAE.globalAdminRouter.on('post', '/api/user/:tenantAlias/create', function(req, res) {
    var loginId = new LoginId(req.params.tenantAlias, AuthenticationConstants.providers.LOCAL, req.body.username, {'password': req.body.password});
    var opts = {
        'visibility': req.body.visibility,
        'email': req.body.email,
        'emailPreference': req.body.emailPreference,
        'locale': req.body.locale || req.ctx.locale(),
        'timezone': req.body.timezone,
        'publicAlias': req.body.publicAlias,
        'acceptedTC': (req.body.acceptedTC === 'true')
    };

    AuthenticationAPI.createUser(req.ctx, loginId, req.body.displayName, opts, function(err, newUser) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(201, newUser);
    });
});

/**
 * @REST postUserCreate
 *
 * Create a new user with a local login strategy
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /user/create
 * @FormParam   {boolean}       [acceptedTC]        Has user accepted terms and conditions
 * @FormParam   {string}        displayName         Name to display for user
 * @FormParam   {string}        [email]             Email address for user
 * @FormParam   {string}        [emailPreference]   Email preferences for user      [daily,immediate,weekly]
 * @FormParam   {string}        [locale]            Locale for user (e.g. en_US)
 * @FormParam   {string}        password            Local password for user
 * @FormParam   {string}        [publicAlias]       Public alias for user
 * @FormParam   {string}        username            Unique username
 * @FormParam   {string}        [visibility]        Visibility of user              [loggedin,private,public]
 * @Return      {User}                              Returns an object containing updated user profile
 */
OAE.tenantRouter.on('post', '/api/user/create', function(req, res) {
    var ctx = req.ctx;
    var tenant = ctx.tenant();
    var user = ctx.user();
    var opts = _getOptionalProfileParameters(req.body);

    /*!
     * Create a local user account
     */
    var createUser = function() {
        var loginId = new LoginId(tenant.alias, AuthenticationConstants.providers.LOCAL, req.body.username, { password: req.body.password });
        AuthenticationAPI.createUser(ctx, loginId, req.body.displayName, opts, function(err, newUser) {
            if (err) {
                return res.send(err.code, err.msg);
            }

            return res.send(201, newUser);
        });
    };

    if (user) {
        if (user.isAdmin(tenant.alias)) {
            // If the current user is an admin, the reCaptcha verification can be skipped
            return createUser();
        } else {
            // Non-admin users cannot create accounts
            return res.send(401);
        }
    }

    // Check if the Terms and Conditions has been agreed to (if applicable)
    var needsTermsAndConditionsAgreement = PrincipalsConfig.getValue(tenant.alias, 'termsAndConditions', 'enabled');
    if (needsTermsAndConditionsAgreement && opts.acceptedTC !== true) {
        return res.send(400, 'You need to accept the Terms and Conditions');
    }

    // Check if we need to validate with reCaptcha
    var needsReCaptcha = PrincipalsConfig.getValue(tenant.alias, 'recaptcha', 'enabled');
    if (!needsReCaptcha) {
        return createUser();
    }

    // An anonymous user, do the recaptcha check
    var recaptchaData = {
        'remoteip':  req.connection.remoteAddress,
        'challenge': req.body.recaptchaChallenge,
        'response':  req.body.recaptchaResponse
    };
    var recaptchaPublicKey = PrincipalsConfig.getValue(tenant.alias, 'recaptcha', 'publicKey');
    var recaptchaPrivateKey = PrincipalsConfig.getValue(tenant.alias, 'recaptcha', 'privateKey');
    var recaptcha = new Recaptcha(recaptchaPublicKey, recaptchaPrivateKey, recaptchaData);
    recaptcha.verify(function(success, error_code) {
        if (success) {
            return createUser();
        } else {
            return res.send(400, 'Invalid reCaptcha token');
        }
    });
});

/**
 * @REST getMe
 *
 * Get the current user's `me` feed
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /me
 * @Return      {MeData}            Returns an object representing the user's me feed data
 */
OAE.globalAdminRouter.on('get', '/api/me', _handleGetMe);
OAE.tenantRouter.on('get', '/api/me', _handleGetMe);

/**
 * @REST postUserImport
 *
 * Import users using a CSV file
 *
 * @Server      admin
 * @Method      POST
 * @Path        /user/import
 * @FormParam   {string}            authenticationStrategy  How are users authenticated       [cas,facebook,google,ldap,local,oauth,shibboleth,signed,twitter]
 * @FormParam   {boolean}           [forceProfileUpdate]    If true, indicates that profiles should be updated with the given data, not just created. Otherwise, profiles will only be created if they don't already have a matching external id in the provided authentication strategy
 * @FormParam   {string}            tenantAlias             The target tenant in which to import the users
 * @FormParam   {File}              file                    CSV file of users to import
 */
OAE.globalAdminRouter.on('post', '/api/user/import', _handleImportUsers);

/**
 * @REST postUserImportTenant
 *
 * Import users using a CSV file
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /user/import
 * @FormParam   {string}            authenticationStrategy  How are users authenticated       [cas,facebook,google,ldap,local,oauth,shibboleth,signed,twitter]
 * @FormParam   {boolean}           [forceProfileUpdate]    If true, indicates that profiles should be updated with the given data, not just created. Otherwise, profiles will only be created if they don't already have a matching external id in the provided authentication strategy
 * @FormParam   {File}              file                    CSV file of users to import
*/
OAE.tenantRouter.on('post', '/api/user/import', _handleImportUsers);

/**
 * @REST postUserIdAdmin
 *
 * Make a user an administrator
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /user/{id}/admin
 * @PathParam   {string}        id                  The ID of the user to make administrator
 */
OAE.globalAdminRouter.on('post', '/api/user/:id/admin', _handleSetTenantAdmin);
OAE.tenantRouter.on('post', '/api/user/:id/admin', _handleSetTenantAdmin);

/**
 * @REST postUserId
 *
 * Update a user's basic profile information
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /user/{id}
 * @PathParam   {string}        id                  The ID of the user
 * @FormParam   {string}        [emailPreference]   Email preferences for user      [daily,immediate,weekly]
 * @FormParam   {string}        [locale]            Locale for user (e.g. en_US)
 * @FormParam   {string}        [publicAlias]       Public alias for user
 * @FormParam   {string}        [visibility]        Visibility of user              [loggedin,private,public]
 * @Return      {User}                              Returns an object representing the updated profile of the user
 */
OAE.globalAdminRouter.on('post', '/api/user/:id', _handleUpdateUser);
OAE.tenantRouter.on('post', '/api/user/:id', _handleUpdateUser);

/**
 * @REST getUserId
 *
 * Get a user's full profile information
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /user/{id}
 * @PathParam   {string}        id                  The ID of the user
 * @Return      {User}                              Returns an object representing the profile of the user
 */
OAE.globalAdminRouter.on('get', '/api/user/:id', _handleGetFullProfile);
OAE.tenantRouter.on('get', '/api/user/:id', _handleGetFullProfile);

/**
 * Extract the optional user profile parameters from the given set of request parameters
 *
 * @param  {Object}     parameters  The parameters from which to extract the profile information
 * @return {Object}                 The relevant parameters for user profiles
 * @api private
 */
var _getOptionalProfileParameters = function(parameters) {
    return {
        'visibility': parameters.visibility,
        'email': parameters.email,
        'emailPreference': parameters.emailPreference,
        'locale': parameters.locale,
        'publicAlias': parameters.publicAlias,
        'acceptedTC': (parameters.acceptedTC === 'true')
    };
};
