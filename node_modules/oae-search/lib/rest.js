/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var util = require('util');

var OAE = require('oae-util/lib/oae');

var SearchAPI = require('oae-search');
var SearchUtil = require('oae-search/lib/util');

var REGEX_SEARCH_ENDPOINT = /\/api\/search\/([^\/]+)(\/.*)?/;

/**
 * A REST endpoint handler for handling any search type
 *
 * @param  {Request}    req     The express request object of the request
 * @param  {Response}   res     The express response object for the request
 * @api private
 */
var _handleSearchRequest = function(req, res) {
    var searchType = req.params[0];
    if (searchType) {
        req.telemetryUrl = util.format('/api/search/%s', searchType);
    }

    var pathParams = req.params[1] ? _.compact(req.params[1].split('/')) : [];
    var opts = _.extend({}, req.query, SearchUtil.getSearchParams(req), {'pathParams': pathParams});
    SearchAPI.search(req.ctx, searchType, opts, function(err, result) {
        if (err) {
            return res.send(err.code, err);
        }

        res.send(200, result);
    });
};

/**
 * @REST adminPostSearchReindexAll
 *
 * Administration function to reindex all data in storage
 *
 * @Server      admin
 * @Method      POST
 * @Path        /search/reindexAll
 * @Return      {void}
 */
OAE.globalAdminRouter.on('post', '/api/search/reindexAll', function(req, res) {
    SearchAPI.postReindexAllTask(req.ctx, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

/**
 * @REST tenantGetSearch
 *
 * Perform a search
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /search/{searchType}
 * @PathParam   {string}                searchType          The type of search to execute  [general]
 * @QueryParam  {number}                [limit]             Maximum number of documents to return (defaults to 10)
 * @QueryParam  {string}                [q]                 Search phrase
 * @QueryParam  {string[]}              [resourceTypes]     Resources to search [all,user,group,content,discussion]
 * @QueryParam  {string}                scope               Scope of the search [_all,_interact,_network,_tenant]
 * @QueryParam  {string}                [sort]              Sort direction (defaults to asc) [asc,desc]
 * @QueryParam  {number}                [start]             Document at which to start (defaults to 0)
 * @Return      {SearchResponse}                            Returns an object containing search results
 */
OAE.tenantRouter.on('get', REGEX_SEARCH_ENDPOINT, _handleSearchRequest, '/api/search');

/**
 * @REST adminGetSearch
 *
 * Perform a search
 *
 * @Server      admin
 * @Method      GET
 * @Path        /search/{searchType}
 * @PathParam   {string}                searchType          The type of search to execute  [general]
 * @QueryParam  {number}                [limit]             Maximum number of documents to return (defaults to 10)
 * @QueryParam  {string}                [q]                 Search phrase
 * @QueryParam  {string[]}              [resourceTypes]     Resources to search [all,user,group,content,discussion]
 * @QueryParam  {string}                scope               Scope of the search [_all,_interact,_network,_tenant]
 * @QueryParam  {string}                [sort]              Sort direction (defaults to asc) [asc,desc]
 * @QueryParam  {number}                [start]             Document at which to start (defaults to 0)
 * @Return      {SearchResponse}                            Returns an object containing search results
 */
OAE.globalAdminRouter.on('get', REGEX_SEARCH_ENDPOINT, _handleSearchRequest, '/api/search');


// Add the REST models for Search

/**
 * @RESTModel SearchResponse
 *
 * @Required  [total, SearchResults]
 * @Property  {string}                  total               Total number of matches
 * @Property  {SearchResult[]}          results             Results from current query
 */

/**
 * @RESTModel SearchResult
 *
 * @Required  [id,lastModified,resourceType,tenant,tenantAlias,visibility]
 * @Property  {string}              description         Description of result
 * @Property  {string}              displayName         Displayable name for result
 * @Property  {string}              id                  Unique identifier for result
 * @Property  {string}              joinable            Can current user join the group ("no","yes")
 * @Property  {string}              lastModified        Time result was last modified (epoch format)
 * @Property  {string}              mime                MIME type for result
 * @Property  {string}              profilePath         URL for result
 * @Property  {string}              resourceSubType     Subtype of resource ("collabdoc","file","link")
 * @Property  {string}              resourceType        Type of resource ("content","discussion","group")
 * @Property  {SearchResultTenant}  tenant              Tenant associated with result
 * @Property  {string}              tenantAlias         Unique identifier for tenant
 * @Property  {string}              thumbnailUrl        URL for thumbnail image of result
 * @Property  {string}              visibility          Visibility of result ("loggedin","private","public")
 */

/**
 * @RESTModel SearchResultTenant
 *
 * @Required  [id,lastModified,resourceType,tenant,tenantAlias,visibility]
 * @Property  {string}              alias               Unique identifier for tenant
 * @Property  {string}              displayName         Displayable name for tenant
 */

