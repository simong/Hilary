/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var ShortId = require('shortid');
var util = require('util');

var ConfigTestsUtil = require('oae-config/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests/lib/util');

/**
 * Set up 2 public tenants and 2 private tenants, each with a public, loggedin, private set of users, groups and
 * content. Each group will be created by the tenant admin user and will hold one extra user.
 * The private group will have the private user as a member, the loggedin group will have the loggedin user as a member, etc..
 *
 * The resulting model looks like:
 *
 * ```
 *  {
 *      "publicTenant": {
 *          "tenant": <Tenant>,
 *          "anonymousRestContext": <RestContext>,
 *          "adminRestContext": <RestCOntext> (of the tenant admin),
 *          "publicContent": <Content>,
 *          "loggedinContent": <Content>,
 *          "privateContent": <Content>,
 *          "publicUser": {
 *              "user": <User>,
 *              "restContext": <RestContext>
 *          },
 *          "loggedinUser": { ... }
 *          "privateUser": { ... }
 *      },
 *      "publicTenant1": { ... },
 *      "privateTenant": { ... },
 *      "privateTenant1": { ... }
 *  }
 * ```
 *
 * @param  {Function}   Invoked when all the entities are set up
 * @throws {Error}      An assertion error is thrown if something does not get created properly
 */
var setupMultiTenantPrivacyEntities = module.exports.setupMultiTenantPrivacyEntities = function(callback) {
    // Create the tenants and users
    TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {
        // Create the content.
        _setupTenant(publicTenant, function() {
            _setupTenant(publicTenant1, function() {
                _setupTenant(privateTenant, function() {
                    _setupTenant(privateTenant1, function() {
                        return callback(publicTenant, publicTenant1, privateTenant, privateTenant1);
                    });
                });
            });
        });
    });
};

/**
 * Ensure that the provided etherpad content matches the expected content that was persisted. This
 * assertion abstracts things such as the `<html></html>` pre-amble of an etherpad document so
 * the consumer only needs to focus on the content it persisted
 *
 * @param  {String}         actualContent       The actual content that was read from the Etherpad API
 * @param  {String}         expectedContent     The expected contents of the etherpad document
 * @throws {AssertionError}                     Thrown if the actual content did not match the expected content
 */
var assertEtherpadContentEquals = module.exports.assertEtherpadContentEquals = function(actualContent, expectedContent) {
    // Wrap the expected content into the etherpad document structure. Also add a line break at the
    // end of the provided content. This is not extremely robust and will likely only be valid for
    // asserting simple single-line content, so it's possible if we have more complex test cases
    // we'll need to revisit this logic
    expectedContent =
        '<!DOCTYPE HTML>' +
        '<html>' +
            '<body>' +
                expectedContent + '<br>' +
            '</body>' +
        '</html>';

    assert.strictEqual(actualContent, expectedContent);
};

/**
 * Create the content within a tenant.
 *
 * @param  {Tenant}     tenant          The tenant to setup
 * @param  {Function}   callback        Invoked when all the entities are set up
 * @throws {Error}                      An assertion error is thrown if something does not get created properly
 * @api private
 */
var _setupTenant = function(tenant, callback) {
    _createMultiPrivacyContent(tenant.adminRestContext, function(publicContent, loggedinContent, privateContent) {
        tenant.publicContent = publicContent;
        tenant.loggedinContent = loggedinContent;
        tenant.privateContent = privateContent;
        callback();
    });
};

/**
 * Set up content of all privacies using the given rest context
 *
 * @param  {RestContext}    restCtx         The rest context to use
 * @param  {Function}       callback        Invoked when all the entities are set up
 * @throws {Error}                          An assertion error is thrown if something does not get created properly
 * @api private
 */
var _createMultiPrivacyContent = function(restCtx, callback) {
    _createContentWithVisibility(restCtx, 'public', function(publicContent) {
        _createContentWithVisibility(restCtx, 'loggedin', function(loggedinContent) {
            _createContentWithVisibility(restCtx, 'private', function(privateContent) {
                return callback(publicContent, loggedinContent, privateContent);
            });
        });
    });
};

/**
 * Create a piece of content with the specified visibility
 *
 * @param  {RestContext}    restCtx             The rest context to use
 * @param  {String}         visibility          The visibility of the user
 * @param  {Function}       callback            Invoked when all the entities are set up
 * @param  {Content}        callback.content    The piece of content that was created
 * @throws {Error}                              An assertion error is thrown if something does not get created properly
 * @api private
 */
var _createContentWithVisibility = function(restCtx, visibility, callback) {
    var randomId = util.format('%s-%s', visibility, ShortId.generate());
    RestAPI.Content.createLink(restCtx, 'displayName-' + randomId, 'description-' + randomId, visibility, 'http://www.oaeproject.org', null, null, function(err, content) {
        assert.ok(!err);
        return callback(content);
    });
};

/**
 * Create a set of test users and a collaborative document.
 * The `nrOfJoinedUsers` specifies how many users should join the document
 *
 * @param  {RestContext}   adminRestContext An administrator rest context that can be used to create the users
 * @param  {Number}   nrOfUsers             The number of users that should be created
 * @param  {Number}   nrOfJoinedUsers       The number of users that should be joined in the document. These will be the first `nrOfJoinedUsers` of the users hash
 * @param  {Function} callback              Standard callback function
 * @param  {Object}   callback.err          Standard error object, if any
 * @param  {Content}  callback.contentObj   The created collaborative document
 * @param  {Object}   callback.users        The created users
 * @param  {Object}   callback.user1        An object containing the user profile and a rest context for the first user of the set of users that was created
 * @param  {Object}   callback.user..       An object containing the user profile and a rest context for the next user of the set of users that was created
 */
var createCollabDoc = module.exports.createCollabDoc = function(adminRestContext, nrOfUsers, nrOfJoinedUsers, callback) {
    TestsUtil.generateTestUsers(adminRestContext, nrOfUsers, function(err, users) {
        assert.ok(!err);

        var userIds = _.keys(users);
        var userValues = _.values(users);

        // Create a collaborative document where all the users are managers
        var name = TestsUtil.generateTestUserId('collabdoc');
        RestAPI.Content.createCollabDoc(userValues[0].restContext, name, 'description', 'public', userIds, [], function(err, contentObj) {
            assert.ok(!err);

            // Create a function that will get executed once each user has joined the document
            var callCallback = _.after(nrOfJoinedUsers, function() {
                var callbackArgs = _.union([contentObj, users], userValues);
                return callback.apply(callback, callbackArgs);
            });

            // If no user should join the document we can return immediately
            if (nrOfJoinedUsers === 0) {
                return callCallback();
            }


            // Join the collab doc for `nrOfJoinedUsers` users
            var joinCollabDoc = function(i) {
                var restCtx = userValues[i].restContext;
                RestAPI.Content.joinCollabDoc(restCtx, contentObj.id, function(err, data) {
                    assert.ok(!err);
                    callCallback();
                });
            };
            for (var i = 0; i < nrOfJoinedUsers; i++) {
                joinCollabDoc(i);
            }
        });
    });
};
