/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var util = require('util');

var MQ = require('oae-util/lib/mq');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var Signature = require('oae-util/lib/signature');

var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;

// bind the library search
SearchAPI.registerSearch('library', require('./searches/library'));

////////////////////
// INDEXING TASKS //
////////////////////

// Binds the local events to the MQ task queue to assign indexing jobs

ContentAPI.on(ContentConstants.events.CREATED_CONTENT, function(ctx, content, members) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'content',
        'resources': [{
            'id': content.contentId,
            'content': content,
            'members': members,
            'opts': {
                'indexResource': true,
                'indexMembers': true
            }
        }]
    });
});

ContentAPI.on(ContentConstants.events.UPDATED_CONTENT, function(ctx, contentId, content) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'content',
        'resources': [{
            'id': contentId,
            'content': content,
            'opts': {
                'indexResource': true,
                'indexMembers': false
            }
        }]
    });
});

ContentAPI.on(ContentConstants.events.UPDATED_CONTENT_MEMBERS, function(ctx, contentId) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'content',
        'resources': [{
            'id': contentId,
            'opts': {
                'indexContent': false,
                'indexMembers': true
            }
        }]
    });
});

ContentAPI.on(ContentConstants.events.PREVIEWED_CONTENT, function(ctx, contentId) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'content',
        'resources': [{
            'id': contentId,
            'opts': {
                'indexContent': true,
                'indexMembers': false
            }
        }]
    });
});

ContentAPI.on(ContentConstants.events.DELETED_CONTENT, function(ctx, contentId) {
    MQ.submit(SearchConstants.mq.TASK_DELETE_DOCUMENT, {'resourceType': 'content', 'id': contentId});
});



////////////////////////
// DOCUMENT PRODUCERS //
////////////////////////

/**
 * Produces search documents for 'content' resources.
 *
 * @see SearchAPI#registerDocumentProducer
 * @api private
 */
var _produceSearchDocuments = function(resources, callback, resourceDocs) {
    resourceDocs = resourceDocs || [];
    if (resources.length === 0) {
        return callback(null, resourceDocs);
    }

    var resource = resources.shift();
    var contentId = resource.id;
    var content = resource.content;

    if (content) {
        resourceDocs.push(_createSearchDocument(content));
        return _produceSearchDocuments(resources, callback, resourceDocs);
    }

    ContentAPI._getContent(contentId, function(err, content) {
        if (err) {
            return callback(err);
        }

        resourceDocs.push(_createSearchDocument(content));
        return _produceSearchDocuments(resources, callback, resourceDocs);
    });
};

/**
 * Convert a content item into a resource search document.
 *
 * @param   {Content}   content     The content item to convert
 * @return  {Object}                A search document
 * @api private
 */
var _createSearchDocument = function(content) {
    var general = _.compact([content.displayName, content.description]).join(' ');
    // add all properties for the resource document metadata
    var searchDoc = {
        'resourceSubType': content.contentType,
        'id': content.contentId,
        'tenantAlias': content.tenant,
        'displayName': content.displayName,
        'visibility': content.visibility,
        'general': general,
        'sort': general
    };
    if (content.thumbnailUri) {
        searchDoc.thumbnailUrl = content.thumbnailUri;
    }
    return searchDoc;
};

SearchAPI.registerDocumentProducer('content', _produceSearchDocuments);


/**
 * Given an array of content search documents, transform them into search documents suitable to be displayed to the user in context.
 *
 * @param   {Context}   ctx             The current context
 * @param   {Object}    docs            A hash, keyed by the document id, while the value is the document to transform
 * @param   {Function}  callback        Invoked when the process completes
 * @param   {Object}    callback.err    An error that occurred, if any
 * @param   {Object}    callback.docs   The transformed docs, in the same form as the `docs` parameter.
 * @api private
 */
var _transformContentDocuments = function(ctx, docs, callback) {
    var transformedDocs = _.map(docs, function(doc) {
        var id = doc['_id'];
        var result = _.extend({}, doc.fields, { 'id': id });

        // Augment it with a downloadable thumbnail url if it has a thumbnail uri.
        // The thumbnail should not be hidden, even if the group is private.
        if (doc.fields.thumbnailUrl) {
            result.thumbnailUrl = ContentAPI.getThumbnailUrl(id);
        }

        return result;
    });

    return callback(null, transformedDocs);
};


// bind the transformer to the search API
SearchAPI.registerDocumentTransformer('content', _transformContentDocuments);
