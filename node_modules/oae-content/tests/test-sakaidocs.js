/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');
var clone = require('clone');
var util = require('util');

var Cassandra = require('oae-util/lib/cassandra');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');
var Tree = require('oae-content/lib/internal/tree');


describe('Sakai documents', function() {

    describe('PageTree', function() {

        // Example tree:
        // * Animals
        //     * Farm
        //         * Cow (D)
        //         * Pig
        //         * Goat (D)
        //     * Pets
        //         * Dog
        //         * Cat
        // * Toys
        //     * Lego
        //     * Dolls

        var hierarchy = [
        {
            'pid': 'p:camtest:animals',
            'children': [
                {
                    'pid': 'p:camtest:farm',
                    'children': [
                        {
                            'pid': 'p:camtest:cow',
                            'children': []
                        },
                        {
                            'pid': 'p:camtest:pig',
                            'children': []
                        },
                        {
                            'pid': 'p:camtest:goat',
                            'children': []
                        }
                    ]
                },
                {
                    'pid': 'p:camtest:pets',
                    'children': [
                        {
                            'pid': 'p:camtest:dog',
                            'children': []
                        },
                        {
                            'pid': 'p:camtest:cat',
                            'children': []
                        }
                    ]
                }
            ]
        },
        {
            'pid': 'p:camtest:toys',
            'children': [
                {
                    'pid': 'p:camtest:lego',
                    'children': []
                },
                {
                    'pid': 'p:camtest:dolls',
                    'children': []
                }
            ]
        }
        ];
        var metadata = {
            'p:camtest:animals': 'animals#false',
            'p:camtest:farm': 'farm#false',
            'p:camtest:cow': 'cow#true',
            'p:camtest:pig': 'pig#false',
            'p:camtest:goat': 'goat#true',
            'p:camtest:pets': 'pets#false',
            'p:camtest:dog': 'dog#false',
            'p:camtest:cat': 'cat#false',
            'p:camtest:toys': 'toys#false',
            'p:camtest:lego': 'lego#false',
            'p:camtest:dolls': 'dolls#false',
        };

        // Rest context that can be used every time we need to make a request as an anonymous user
        var anonymousRestContext = null;
        // Rest context that can be used every time we need to make a request as a global admin
        var camAdminRestContext = null;

        before(function(callback) {
            // Fill up anonymous rest context
            anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
            // Fill up global admin rest context
            camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
            // Log in the global admin so his cookie jar is set up appropriately
            RestAPI.User.getMe(camAdminRestContext, function(err, meObj) {
                callback();
            });
        });

        var createPageTree = function(callback) {
            var userId = TestsUtil.generateTestUserId('simon');
            RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'simong', {}, function(err, createdUser) {
                assert.ok(!err);
                var ctx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, userId, 'password')

                RestAPI.Content.createSakaiDoc(ctx, 'Test Sakai Doc', 'Test for page trees', 'public', [], [], function(err, contentObj) {
                    assert.ok(!err);
                    assert.ok(contentObj.contentId);

                    // TODO: Use REST.
                    var values = clone(metadata);
                    values.hierarchy = JSON.stringify(hierarchy);
                    var q = Cassandra.constructUpsertCQL('PagesHierarchy', 'contentId', contentObj.contentId, values, 'QUORUM');
                    Cassandra.runQuery(q.query, q.parameters, function(err) {
                        assert.ok(!err);
                        Tree.getTree(null, contentObj.contentId, function(err, tree) {
                            assert.ok(!err);
                            callback(ctx, contentObj, tree);
                        });
                    });
                });
            });
        };


        describe('#add()', function() {

            it('verify adding a top level node at the top', function(callback) {
                createPageTree(function(ctx, contentObj, tree) {

                    tree.add('p:camtest:new', 'New node', true, null, 'p:camtest:animals', function(err) {
                        assert.ok(!err);

                        Tree.getTree(null, contentObj.contentId, function(err, tree) {
                            var newMetaData = tree.getMetaData();
                            assert.equal(newMetaData['p:camtest:new'].title, 'New node');

                            var newHierarchy = tree.getHierarchy();
                            assert.equal(newHierarchy.length, 3);
                            assert.equal(newHierarchy[0].pid, 'p:camtest:new');

                            callback();
                        });
                    });
                });
            });

            it('verify adding a top level node between two top level nodes', function(callback) {
                createPageTree(function(ctx, contentObj, tree) {

                    tree.add('p:camtest:new', 'New node', true, 'p:camtest:animals', 'p:camtest:toys', function(err) {
                        assert.ok(!err);

                        Tree.getTree(null, contentObj.contentId, function(err, tree) {
                            var newMetaData = tree.getMetaData();
                            assert.equal(newMetaData['p:camtest:new'].title, 'New node');

                            var newHierarchy = tree.getHierarchy();
                            assert.equal(newHierarchy.length, 3);
                            assert.equal(newHierarchy[1].pid, 'p:camtest:new');

                            callback();
                        });
                    });
                });                
            });

            it('verify adding a top level node at the bottom', function(callback) {
                createPageTree(function(ctx, contentObj, tree) {

                    tree.add('p:camtest:new', 'New node', true, 'p:camtest:toys', null, function(err) {
                        assert.ok(!err);

                        Tree.getTree(null, contentObj.contentId, function(err, tree) {
                            var newMetaData = tree.getMetaData();
                            assert.equal(newMetaData['p:camtest:new'].title, 'New node');

                            var newHierarchy = tree.getHierarchy();
                            assert.equal(newHierarchy.length, 3);
                            assert.equal(newHierarchy[2].pid, 'p:camtest:new');

                            callback();
                        });
                    });
                });
            });

            it('verify adding a non-top level node at the top of the child tree', function(callback) {
                createPageTree(function(ctx, contentObj, tree) {

                    tree.add('p:camtest:new', 'New node', true, null, 'p:camtest:dog', function(err) {
                        assert.ok(!err);

                        Tree.getTree(null, contentObj.contentId, function(err, tree) {
                            var newMetaData = tree.getMetaData();
                            assert.equal(newMetaData['p:camtest:new'].title, 'New node');

                            var newHierarchy = tree.getHierarchy();
                            assert.equal(newHierarchy[0].children[1].children.length, 3);
                            assert.equal(newHierarchy[0].children[1].children[0].pid, 'p:camtest:new');

                            callback();
                        });
                    });
                });
            });

            it('verify adding a non-top level node at the middle of the child tree', function(callback) {
                createPageTree(function(ctx, contentObj, tree) {

                    tree.add('p:camtest:new', 'New node', true, 'p:camtest:dog', 'p:camtest:cat', function(err) {
                        assert.ok(!err);

                        Tree.getTree(null, contentObj.contentId, function(err, tree) {
                            var newMetaData = tree.getMetaData();
                            assert.equal(newMetaData['p:camtest:new'].title, 'New node');

                            var newHierarchy = tree.getHierarchy();
                            assert.equal(newHierarchy[0].children[1].children.length, 3);
                            assert.equal(newHierarchy[0].children[1].children[1].pid, 'p:camtest:new');

                            callback();
                        });
                    });
                });
            });

            it('verify adding a non-top level node at the bottom of the child tree', function(callback) {
                createPageTree(function(ctx, contentObj, tree) {

                    tree.add('p:camtest:new', 'New node', true, 'p:camtest:cat', null, function(err) {
                        assert.ok(!err);

                        Tree.getTree(null, contentObj.contentId, function(err, tree) {
                            var newMetaData = tree.getMetaData();
                            assert.equal(newMetaData['p:camtest:new'].title, 'New node');
                            var newHierarchy = tree.getHierarchy();
                            assert.equal(newHierarchy[0].children[1].children.length, 3);
                            assert.equal(newHierarchy[0].children[1].children[2].pid, 'p:camtest:new');

                            callback();
                        });
                    });
                });
            });

            it('verify adding fails if both pageIds are null', function(callback) {
                createPageTree(function(ctx, contentObj, tree) {

                    tree.add('p:camtest:new', 'New node', true, null, null, function(err) {
                        assert.equal(err.code, 400);
                        callback();
                    });
                });
            });

            it('verify adding fails if pageIds do not exist', function(callback) {
                createPageTree(function(ctx, contentObj, tree) {
                    tree.add('p:camtest:new', 'New node', true, 'foo', null, function(err) {
                        assert.equal(err.code, 400);
                        tree.add('p:camtest:new', 'New node', true, null, 'bar', function(err) {
                            assert.equal(err.code, 400);
                            tree.add('p:camtest:new', 'New node', true, 'foo', 'bar', function(err) {
                                assert.equal(err.code, 400);
                                callback();
                            });
                        });
                    });
                });
            });
        });




        describe('#delete()', function() {

            it('verify parameter validation', function(callback) {
                createPageTree(function(ctx, contentObj, tree) {
                    tree.remove(null, function(err) {
                        assert.equal(err.code, 400);
                        tree.remove('not-a-valid-id', function(err) {
                            assert.equal(err.code, 400);
                            callback();
                        });
                    });
                });
            });

            it('verify deleting all nodes should not be possible', function(callback) {
                createPageTree(function(ctx, contentObj, tree) {
                    tree.remove('p:camtest:animals', function(err) {
                        assert.ok(!err);
                        tree.remove('p:camtest:lego', function(err) {
                            assert.ok(!err);
                            tree.remove('p:camtest:dolls', function(err) {
                                assert.ok(!err);
                                tree.remove('p:camtest:toys', function(err) {
                                    assert.equal(err.code, 400);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });

            it('verify deleting a node removes child nodes', function(callback) {
                createPageTree(function(ctx, contentObj, tree) {
                    tree.remove('p:camtest:animals', function(err) {
                        assert.ok(!err);
                        Tree.getTree(null, contentObj.contentId, function(err, tree) {
                            assert.ok(!err);
                            var newHierarchy = tree.getHierarchy();
                            assert.equal(newHierarchy.length, 1);
                            assert.equal(newHierarchy[0].pid, 'p:camtest:toys');
                            assert.equal(newHierarchy[0].children.length, 2);
                            assert.equal(newHierarchy[0].children[0].pid, 'p:camtest:lego');
                            assert.equal(newHierarchy[0].children[1].pid, 'p:camtest:dolls');


                            var newMetaData = tree.getMetaData();
                            assert.equal(newMetaData['p:camtest:animals'], null);
                            assert.equal(newMetaData['p:camtest:farm'], null);
                            assert.equal(newMetaData['p:camtest:cow'], null);
                            assert.equal(newMetaData['p:camtest:pig'], null);
                            assert.equal(newMetaData['p:camtest:goat'], null);
                            assert.equal(newMetaData['p:camtest:pets'], null);
                            assert.equal(newMetaData['p:camtest:dog'], null);
                            assert.equal(newMetaData['p:camtest:cat'], null);
                            callback();
                        });
                    });
                });
            });
        });

        describe('#move()', function() {
            it('verify moving', function(callback) {
                createPageTree(function(ctx, contentObj, tree) {
                    // Move the whole animals subtree under toys (above lego.)
                    tree.move('p:camtest:animals', null, 'p:camtest:lego', function(err) {
                        assert.ok(!err);

                        Tree.getTree(null, contentObj.contentId, function(err, tree) {
                            assert.ok(!err);
                            var hierarchy = tree.getHierarchy();
                            assert.equal(hierarchy[0].pid, 'p:camtest:toys');
                            assert.equal(hierarchy[0].children.length, 3);
                            assert.equal(hierarchy[0].children[0].pid, 'p:camtest:animals');
                            callback();
                        })
                    });
                });
            });

            it('verify validation', function(callback) {
                createPageTree(function(ctx, contentObj, tree) {
                    tree.move('invalid-page-id', null, 'p:camtest:lego', function(err) {
                        assert.equal(err.code, 400);
                        tree.move('p:camtest:animals', null, 'bar', function(err) {
                            assert.equal(err.code, 400);
                            tree.move('invalid-page-id', 'foo', null, function(err) {
                                assert.equal(err.code, 400);
                                tree.move('invalid-page-id', null, null, function(err) {
                                    assert.equal(err.code, 400);
                                    tree.move('invalid-page-id', 'foo', 'bar', function(err) {
                                        assert.equal(err.code, 400);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });

            it('verify moving to a childnode is impossible', function(callback) {
                createPageTree(function(ctx, contentObj, tree) {
                    tree.move('p:camtest:animals', null, 'p:camtest:pig', function(err) {
                        assert.equal(err.code, 400);
                        callback();
                    });
                });
            });
        });

        describe('#updateMetaData', function() {
            it('verify updating', function(callback) {
                createPageTree(function(ctx, contentObj, tree) {
                    tree.updateMetaData('p:camtest:cow', 'Delicious cows', false, function(err) {
                        assert.ok(!err);
                        Tree.getTree(null, contentObj.contentId, function(err, tree) {
                            assert.ok(!err);
                            var newMetaData = tree.getMetaData();
                            assert.equal(newMetaData['p:camtest:cow'].title, 'Delicious cows');
                            callback();
                        });
                    });
                });
            });

            it('verify page title validation', function(callback) {
                createPageTree(function(ctx, contentObj, tree) {
                    // Missing title
                    tree.updateMetaData('p:camtest:cow', null, false, function(err) {
                        assert.equal(err.code, 400);
                        tree.updateMetaData('p:camtest:cow', 'title with # in it', false, function(err) {
                            assert.equal(err.code, 400);
                            callback();
                        });
                    });
                });
            });
        });
    });
});