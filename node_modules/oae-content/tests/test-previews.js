/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');

var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

describe('File previews', function() {

    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a global admin on the created tenant.
    var globalAdminOnTenantRestContext = null;
    // Rest context that can be used every time we need to make a request as an anonymous user on the created tenant
    var anonymousRestContext = null;


    var suitable_files = null;

    before(function(callback) {
        // Fill up global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        // Fill up the anonymous context
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.signed.host);

        // An object that adheres to the RestAPI.Content.addPreviewItems.files parameter.
        suitable_files = {
            'file.small.jpg': {
                'file': getFileStream,
                'size': 'small'
            },
            'file.normal.jpg': {
                'file': getSakaiLogoStream,
                'size': 'normal'
            },
            'thumbnail.png': {
                'file': getFileStream,
                'size': 'thumbnail'
            },
        };

        // Login on the camtest tenant
        RestAPI.Authentication.loginOnTenant(globalAdminRestContext, 'signedtest', function(err, ctx) {
            assert.ok(!err);
            globalAdminOnTenantRestContext = ctx;

            RestAPI.User.getMe(globalAdminOnTenantRestContext, function(err, user) {
                assert.ok(!err);
                assert.ok(!user.anon);
                callback();
            });
        });
    });

    /**
     * @return {Stream}     A stream that points to sakaiger that can be uploaded.
     */
    var getFileStream = function() {
        var file = __dirname + '/data/sakaiger.png';
        return fs.createReadStream(file);
    };

    /**
     * @return {Stream}     A stream that points to the sakai logo that can be uploaded.
     */
    var getSakaiLogoStream = function() {
        var file = __dirname + '/data/sakai-logo.png';
        return fs.createReadStream(file);
    };

    /**
     * Creates a file and adds 2 preview items
     * @param {Function}    callback            Standard callback method.
     * @param {Object}      callback.contexts   contexts object.
     * @param {Object}      callback.content    Content object as returned by `RestAPI.ContentcreateFile`.
     * @param {Object}      callback.previews   Previews object as returned by `RestAPI.ContentgetPreviewItems`.
     */
    var createPreviews = function(callback) {
        TestsUtil.generateTestUsers(globalAdminOnTenantRestContext, 2, function(err, users) {
            assert.ok(!err);

            var contexts = {};
            var keys = Object.keys(users);
            contexts['nicolaas'] = users[keys[0]];
            contexts['simon'] = users[keys[1]];

            RestAPI.Content.createFile(contexts['nicolaas'].restContext, 'Test Content 2', 'Test content description 2', 'private', getFileStream, [], [], function(err, contentObj) {
                assert.ok(!err);
                assert.ok(contentObj.contentId);
                assert.equal(contentObj.previewStatus, 'pending');

                // Add some preview items.
                RestAPI.Content.addPreviewItems(globalAdminOnTenantRestContext, contentObj.contentId, 'done', suitable_files, {}, function(err) {
                    assert.ok(!err);

                    // Get a list of preview items.
                    RestAPI.Content.getPreviewItems(contexts['nicolaas'].restContext, contentObj.contentId, function(err, previews) {
                        assert.ok(!err);
                        assert.equal(previews.files.length, 2);

                        // Ensure that the thumbnail and status parameters are set.
                        RestAPI.Content.getContent(contexts['nicolaas'].restContext, contentObj.contentId, function(err, updatedContentObj) {
                            assert.ok(!err);
                            assert.ok(updatedContentObj.thumbnailUrl);
                            assert.equal(updatedContentObj.previewStatus, 'done');
                            callback(contexts, updatedContentObj, previews);
                        })
                    });
                });
            });
        });
    };

    it('verify uploading a preview', function(callback) {
        createPreviews(function(contexts, contentObj, previews) {
            // Only global admins should be allowed to create previews.
            RestAPI.Content.addPreviewItems(anonymousRestContext, contentObj.contentId, 'done', suitable_files, {}, function(err) {
                assert.ok(err);
                assert.equal(err.code, 401);

                // Download one.
                RestAPI.Content.downloadPreviewItem(contexts['nicolaas'].restContext, contentObj.contentId, previews.files[0].filename, previews.signature.signature, previews.signature.expires, function(err, body, response) {
                    assert.ok(!err, JSON.stringify(err, null, 4));
                    assert.ok(!body); // nginx streams the actual file body, the app server just returns a 204.
                    assert.equal(response.statusCode, 204);
                    assert.ok(response.headers['x-accel-redirect']);

                    // Make sure that nobody else can see a private item.
                    RestAPI.Content.downloadPreviewItem(contexts['simon'].restContext, contentObj.contentId, previews.files[0].filename, 'wrong', Date.now()+6000, function(err, body, response) {
                        assert.equal(err.code, 401);
                        assert.ok(!body);
                        callback();
                    });
                });
            });
        });
    });

    it('verify uploading preview parameter validation', function(callback) {
        TestsUtil.generateTestUsers(globalAdminOnTenantRestContext, 1, function(err, users) {
            var simon = _.values(users)[0]
            assert.ok(!err);

            RestAPI.Content.createFile(simon.restContext, 'Test Content', 'Test content description', 'private', getFileStream, [], [], function(err, contentObj) {
                assert.ok(!err);
                assert.ok(contentObj.contentId);
                assert.equal(contentObj.previewStatus, 'pending');

                // Invalid contentId.
                RestAPI.Content.addPreviewItems(globalAdminOnTenantRestContext, 'blah', 'foo', {}, {}, function(err) {
                    assert.equal(err.code, 400);

                    // Bad status parameter.
                    RestAPI.Content.addPreviewItems(globalAdminOnTenantRestContext, contentObj.contentId, 'foo', {}, {}, function(err) {
                        assert.equal(err.code, 400);

                        // Non existing piece of content.
                        RestAPI.Content.addPreviewItems(globalAdminOnTenantRestContext, 'c:foo:bar', 'foo', {}, {}, function(err) {
                            assert.equal(err.code, 400);
                            callback();
                        });
                    });
                });
            });
        });
    });

    it('verify setting preview status', function(callback) {
         TestsUtil.generateTestUsers(globalAdminOnTenantRestContext, 1, function(err, users) {
            var simon = _.values(users)[0]
            assert.ok(!err);

            RestAPI.Content.createFile(simon.restContext, 'Test Content', 'Test content description', 'private', getFileStream, [], [], function(err, contentObj) {
                assert.ok(!err);
                assert.ok(contentObj.contentId);
                assert.equal(contentObj.previewStatus, 'pending');

                // Invalid contentId.
                RestAPI.Content.addPreviewItems(globalAdminOnTenantRestContext, contentObj.contentId, 'ignored', {}, {}, function(err) {
                    assert.ok(!err);

                    RestAPI.Content.getContent(simon.restContext, contentObj.contentId, function(err, updatedContentObj) {
                        assert.ok(!err);
                        assert.equal(updatedContentObj.previewStatus, 'ignored');
                        callback();
                    });
                });
            });
        });
    });

    it('verify preview download parameter validation', function(callback) {
        createPreviews(function(contexts, contentObj, previews) {
            // Missing parameters.
            RestAPI.Content.downloadPreviewItem(contexts['nicolaas'].restContext, contentObj.contentId, previews.files[0].filename, null, previews.signature.expires, function(err, body, response) {
                assert.ok(err.code, 400);
                assert.ok(!body);

                RestAPI.Content.downloadPreviewItem(contexts['nicolaas'].restContext, contentObj.contentId, previews.files[0].filename, previews.signature.signature, null, function(err, body, response) {
                    assert.ok(err.code, 400);
                    assert.ok(!body);

                    // Bad signature.
                    RestAPI.Content.downloadPreviewItem(contexts['nicolaas'].restContext, contentObj.contentId, previews.files[0].filename, 'totally wrong', previews.signature.expires, function(err, body, response) {
                        assert.ok(err.code, 401);
                        assert.ok(!body);

                        callback();
                    });
                });
            });
        })
    });
});
